[{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"what-is-the-gdc","dir":"Articles","previous_headings":"","what":"What is the GDC?","title":"The GenomicDataCommons Package","text":"Genomic Data Commons (GDC) website: National Cancer Institute’s (NCI’s) Genomic Data Commons (GDC) data sharing platform promotes precision medicine oncology. just database tool; expandable knowledge network supporting import standardization genomic clinical data cancer research programs. GDC contains NCI-generated data largest comprehensive cancer genomic datasets, including Cancer Genome Atlas (TCGA) Therapeutically Applicable Research Generate Effective Therapies (TARGET). first time, datasets harmonized using common set bioinformatics pipelines, data can directly compared. growing knowledge system cancer, GDC also enables researchers submit data, harmonizes data import GDC. researchers add clinical genomic data GDC, become even powerful tool making discoveries molecular basis cancer may lead better care patients. data model GDC complex, worth quick overview graphical representation included . data model encoded -called property graph. Nodes represent entities Projects, Cases, Diagnoses, Files (various kinds), Annotations. relationships entities maintained edges. nodes edges may Properties supply instance details. GDC API exposes nodes edges somewhat simplified set RESTful endpoints.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"quickstart","dir":"Articles","previous_headings":"","what":"Quickstart","title":"The GenomicDataCommons Package","text":"quickstart section just meant show basic functionality. details functionality included vignette function-specific help. software available Bioconductor.org can downloaded via BiocManager::install. report bugs problems, either submit new issue submit bug.report(package='GenomicDataCommons') within R (redirect new issue GitHub).","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"installation","dir":"Articles","previous_headings":"Quickstart","what":"Installation","title":"The GenomicDataCommons Package","text":"Installation can achieved via Bioconductor’s BiocManager package.","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install('GenomicDataCommons') library(GenomicDataCommons)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"check-connectivity-and-status","dir":"Articles","previous_headings":"Quickstart","what":"Check connectivity and status","title":"The GenomicDataCommons Package","text":"GenomicDataCommons package relies network connectivity. addition, NCI GDC API must also operational maintenance. Checking status can used check connectivity functionality. check status code:","code":"GenomicDataCommons::status() ## $commit ## [1] \"d05a8530c733492e038fc2c3fda7c47a000652df\" ##  ## $data_release ## [1] \"Data Release 32.0 - March 29, 2022\" ##  ## $status ## [1] \"OK\" ##  ## $tag ## [1] \"3.0.0\" ##  ## $version ## [1] 1 stopifnot(GenomicDataCommons::status()$status==\"OK\")"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"find-data","dir":"Articles","previous_headings":"Quickstart","what":"Find data","title":"The GenomicDataCommons Package","text":"following code builds manifest can used guide download raw data. , filtering finds gene expression files quantified raw counts using STAR ovarian cancer patients.","code":"ge_manifest <- files() %>%     filter( cases.project.project_id == 'TCGA-OV') %>%      filter( type == 'gene_expression' ) %>%     filter( analysis.workflow_type == 'STAR - Counts')  %>%     manifest() head(ge_manifest) ## # A tibble: 6 × 5 ##   id                                   filename               md5     size state ##   <chr>                                <chr>                  <chr>  <dbl> <chr> ## 1 7c69529f-2273-4dc4-b213-e84924d78bea d6472bd0-b4e2-4ed1-a8… 19d5… 4.25e6 rele… ## 2 0eff4634-f8c4-4db9-8a7c-331b21689bae 42165baf-b32c-4fc4-8b… d89d… 4.26e6 rele… ## 3 7d74b4c5-6391-4b3e-95a3-020ea0869e86 accf08d4-a784-4908-83… fb83… 3.11e6 rele… ## 4 dc2aeea4-3cd0-4623-92f4-bbbc962851cc 8ab508b9-2993-4e66-b8… 2623… 4.61e6 rele… ## 5 0cf852be-d2e3-4fde-bba8-c93efae2961a 93831282-1dd1-49a3-ac… 0507… 4.27e6 rele… ## 6 d33ad23e-2413-419c-8b0b-93ed00583033 bffe7439-0f9b-422f-b0… 1bba… 4.47e6 rele…"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"download-data","dir":"Articles","previous_headings":"Quickstart","what":"Download data","title":"The GenomicDataCommons Package","text":"762 gene expression files specified query . Using multiple processes download significantly speeds transfer many cases. standard 1Gb connection, following completes 30 seconds. first time data downloaded, R ask create cache directory (see ?gdc_cache details setting interacting cache). Resulting downloaded files stored cache directory. Future access files directly cache, alleviating multiple downloads. download included controlled-access data, download needed include token. Details available authentication section .","code":"fnames <- lapply(ge_manifest$id[1:20], gdcdata)"},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"clinical-data","dir":"Articles","previous_headings":"Quickstart > Metadata queries","what":"Clinical data","title":"The GenomicDataCommons Package","text":"Accessing clinical data common task. Given set case_ids, gdc_clinical() function return list four tibbles. demographic diagnoses exposures main","code":"case_ids = cases() %>% results(size=10) %>% ids() clindat = gdc_clinical(case_ids) names(clindat) ## [1] \"demographic\" \"diagnoses\"   \"exposures\"   \"main\" head(clindat[[\"main\"]]) ## # A tibble: 6 × 13 ##   id         lost_to_followup days_to_lost_to… created_datetime updated_datetime ##   <chr>      <chr>            <lgl>            <chr>            <chr>            ## 1 4829dd8c-… NA               NA               2020-07-31T09:2… 2021-07-12T12:2… ## 2 d420e653-… NA               NA               2019-10-14T10:4… 2021-03-03T15:1… ## 3 bfe15f44-… NA               NA               2019-08-14T15:1… 2020-10-20T19:2… ## 4 8b3b1f24-… NA               NA               2018-10-02T15:5… 2019-09-20T15:1… ## 5 fa30fc7f-… NA               NA               2020-05-18T13:2… 2021-07-12T12:2… ## 6 47322ea3-… NA               NA               2019-10-14T10:4… 2021-07-12T12:2… ## # … with 8 more variables: case_id <chr>, state <chr>, disease_type <chr>, ## #   submitter_id <chr>, days_to_consent <lgl>, consent_type <lgl>, ## #   primary_site <chr>, index_date <chr> head(clindat[[\"diagnoses\"]]) ## # A tibble: 6 × 101 ##   case_id gleason_pattern… ajcc_pathologic… ann_arbor_clini… created_datetime    ##   <chr>   <lgl>            <chr>            <lgl>            <dttm>              ## 1 4829dd… NA               NA               NA               2020-07-31 14:25:24 ## 2 d420e6… NA               NA               NA               2020-02-27 19:00:21 ## 3 bfe15f… NA               Stage I          NA               2020-02-27 18:37:46 ## 4 8b3b1f… NA               Stage I          NA               2019-05-15 18:02:25 ## 5 fa30fc… NA               Stage IV         NA               2020-06-15 17:57:49 ## 6 fa30fc… NA               NA               NA               2020-06-15 17:57:49 ## # … with 96 more variables: tissue_or_organ_of_origin <chr>, ## #   age_at_diagnosis <int>, cog_liver_stage <lgl>, ## #   child_pugh_classification <lgl>, peritoneal_fluid_cytological_status <lgl>, ## #   metastasis_at_diagnosis_site <chr>, state <chr>, ## #   pregnant_at_diagnosis <lgl>, cog_rhabdomyosarcoma_risk_group <lgl>, ## #   primary_gleason_grade <lgl>, margins_involved_site <lgl>, morphology <chr>, ## #   medulloblastoma_molecular_classification <lgl>, …"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"general-metadata-queries","dir":"Articles","previous_headings":"Quickstart > Metadata queries","what":"General metadata queries","title":"The GenomicDataCommons Package","text":"GenomicDataCommons package can access significant clinical, demographic, biospecimen, annotation information contained NCI GDC. gdc_clinical() function often needed, API GenomicDataCommons package make much flexibility fine-tuning required.","code":"expands = c(\"diagnoses\",\"annotations\",              \"demographic\",\"exposures\") clinResults = cases() %>%     GenomicDataCommons::select(NULL) %>%     GenomicDataCommons::expand(expands) %>%     results(size=50) str(clinResults[[1]],list.len=6) ##  chr [1:50] \"4829dd8c-5445-41b3-ae37-bbcc333e8c9e\" ... # or listviewer::jsonedit(clinResults)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"basic-design","dir":"Articles","previous_headings":"","what":"Basic design","title":"The GenomicDataCommons Package","text":"package design meant similarities “hadleyverse” approach dplyr. Roughly, functionality finding accessing files metadata can divided : Simple query constructors based GDC API endpoints. set verbs applied, adjust filtering, field selection, faceting (fields aggregation) result new query object (endomorphism) set verbs take query return results GDC addition, exhiliary functions asking GDC API information available default fields, slicing BAM files, downloading actual data files. overview functionality1. projects() cases() files() annotations() filter() facet() select() mapping() available_fields() default_fields() grep_fields() available_values() available_expand() results() count() response() gdcdata() transfer() gdc_client() aggregations() gdc_token() slicing()","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"The GenomicDataCommons Package","text":"two main classes operations working NCI GDC. Querying metadata finding data files (e.g., finding gene expression quantifications data files colon cancer patients). Transferring raw processed data GDC another computer (e.g., downloading raw processed data) classes operation reviewed detail following sections.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"querying-metadata","dir":"Articles","previous_headings":"Usage","what":"Querying metadata","title":"The GenomicDataCommons Package","text":"Vast amounts metadata cases (patients, basically), files, projects, -called annotations available via NCI GDC API. Typically, one want query metadata either focus set files download transfer perform -called aggregations (pivot-tables, facets, similar R table() functionality). Querying metadata starts creating “blank” query. One often want filter query limit results prior retrieving results. GenomicDataCommons package helper functions listing fields available filtering. addition fetching results, GDC API allows faceting, aggregating,, useful compiling reports, generating dashboards, building user interfaces GDC data (see GDC web query interface non-R-based example).","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"creating-a-query","dir":"Articles","previous_headings":"Usage > Querying metadata","what":"Creating a query","title":"The GenomicDataCommons Package","text":"query GDC starts life R. Queries follow four metadata endpoints available GDC. particular, four convenience functions create GDCQuery objects (actually, specific subclasses GDCQuery): projects() cases() files() annotations() pquery object now object (S3) class, GDCQuery (gdc_projects list). object contains following elements: fields: character vector fields returned retrieve data. fields specified , example, projects() function, default fields GDC used (see default_fields()) filters: contain results calling filter() method used filter results retrieval. facets: character vector field names used aggregating data call aggregations(). archive: One either “default” “legacy”. token: character(1) token GDC. See authentication section details, note , general, token necessary metadata query retrieval, actual data download. Looking actual object (get used using str()!), note query contains results.","code":"pquery = projects() str(pquery) ## List of 5 ##  $ fields : chr [1:10] \"dbgap_accession_number\" \"disease_type\" \"intended_release_date\" \"name\" ... ##  $ filters: NULL ##  $ facets : NULL ##  $ legacy : logi FALSE ##  $ expand : NULL ##  - attr(*, \"class\")= chr [1:3] \"gdc_projects\" \"GDCQuery\" \"list\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"retrieving-results","dir":"Articles","previous_headings":"Usage > Querying metadata","what":"Retrieving results","title":"The GenomicDataCommons Package","text":"[ GDC pagination documentation ] [ GDC sorting documentation ] query object available, next step retrieve results GDC. GenomicDataCommons package. basic type results can get simple count() records available satisfy filter criteria. Note set filters, count() represent project records publicly available GDC “default” archive\" results() method fetch actual results. results returned GDC JSON format converted (potentially nested) list R. str() method useful taking quick glimpse data. default 10 records returned. can use size arguments results() either page results change number results. Finally, convenience method, results_all() simply fetch available results given query. Note results_all() may take long time return HUGE result sets used carefully. Use combination count() results() get sense expected data size probably warranted calling results_all() Extracting subsets results manipulating results conventional R data structure easily generalizable. However, purrr, rlist, data.tree packages potentially interest manipulating complex, nested list structures. viewing results interactive viewer, consider listviewer package.","code":"pcount = count(pquery) # or pcount = pquery %>% count() pcount ## [1] 70 presults = pquery %>% results() str(presults) ## List of 9 ##  $ id                    : chr [1:10] \"HCMI-CMDC\" \"GENIE-GRCC\" \"GENIE-DFCI\" \"GENIE-NKI\" ... ##  $ primary_site          :List of 10 ##   ..$ HCMI-CMDC : chr [1:16] \"Connective, subcutaneous and other soft tissues\" \"Breast\" \"Kidney\" \"Bronchus and lung\" ... ##   ..$ GENIE-GRCC: chr [1:45] \"Other and ill-defined sites in lip, oral cavity and pharynx\" \"Uterus, NOS\" \"Rectum\" \"Ovary\" ... ##   ..$ GENIE-DFCI: chr [1:49] \"Eye and adnexa\" \"Other and ill-defined sites in lip, oral cavity and pharynx\" \"Uterus, NOS\" \"Rectum\" ... ##   ..$ GENIE-NKI : chr [1:42] \"Eye and adnexa\" \"Other and ill-defined sites in lip, oral cavity and pharynx\" \"Uterus, NOS\" \"Rectum\" ... ##   ..$ GENIE-VICC: chr [1:46] \"Bronchus and lung\" \"Adrenal gland\" \"Gallbladder\" \"Esophagus\" ... ##   ..$ GENIE-UHN : chr [1:42] \"Eye and adnexa\" \"Other and ill-defined sites in lip, oral cavity and pharynx\" \"Uterus, NOS\" \"Rectum\" ... ##   ..$ GENIE-MDA : chr [1:42] \"Eye and adnexa\" \"Uterus, NOS\" \"Ovary\" \"Other and unspecified urinary organs\" ... ##   ..$ GENIE-MSK : chr [1:49] \"Eye and adnexa\" \"Other and ill-defined sites in lip, oral cavity and pharynx\" \"Uterus, NOS\" \"Rectum\" ... ##   ..$ GENIE-JHU : chr [1:33] \"Eye and adnexa\" \"Uterus, NOS\" \"Rectum\" \"Ovary\" ... ##   ..$ FM-AD     : chr [1:42] \"Bronchus and lung\" \"Esophagus\" \"Cervix uteri\" \"Other and unspecified female genital organs\" ... ##  $ dbgap_accession_number: chr [1:10] \"phs001486\" NA NA NA ... ##  $ project_id            : chr [1:10] \"HCMI-CMDC\" \"GENIE-GRCC\" \"GENIE-DFCI\" \"GENIE-NKI\" ... ##  $ disease_type          :List of 10 ##   ..$ HCMI-CMDC : chr [1:11] \"Epithelial Neoplasms, NOS\" \"Complex Mixed and Stromal Neoplasms\" \"Gliomas\" \"Miscellaneous Bone Tumors\" ... ##   ..$ GENIE-GRCC: chr [1:32] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" ... ##   ..$ GENIE-DFCI: chr [1:52] \"Osseous and Chondromatous Neoplasms\" \"Other Leukemias\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... ##   ..$ GENIE-NKI : chr [1:23] \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" \"Transitional Cell Papillomas and Carcinomas\" ... ##   ..$ GENIE-VICC: chr [1:43] \"Neoplasms, NOS\" \"Adnexal and Skin Appendage Neoplasms\" \"Squamous Cell Neoplasms\" \"Gliomas\" ... ##   ..$ GENIE-UHN : chr [1:39] \"Other Leukemias\" \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... ##   ..$ GENIE-MDA : chr [1:34] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" ... ##   ..$ GENIE-MSK : chr [1:49] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" \"Fibromatous Neoplasms\" ... ##   ..$ GENIE-JHU : chr [1:33] \"Osseous and Chondromatous Neoplasms\" \"Other Leukemias\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... ##   ..$ FM-AD     : chr [1:23] \"Gliomas\" \"Acinar Cell Neoplasms\" \"Specialized Gonadal Neoplasms\" \"Miscellaneous Tumors\" ... ##  $ name                  : chr [1:10] \"NCI Cancer Model Development for the Human Cancer Model Initiative\" \"AACR Project GENIE - Contributed by Institut Gustave Roussy\" \"AACR Project GENIE - Contributed by Dana-Farber Cancer Institute\" \"AACR Project GENIE - Contributed by Netherlands Cancer Institute\" ... ##  $ releasable            : logi [1:10] TRUE TRUE TRUE TRUE TRUE TRUE ... ##  $ state                 : chr [1:10] \"open\" \"open\" \"open\" \"open\" ... ##  $ released              : logi [1:10] TRUE TRUE TRUE TRUE TRUE TRUE ... ##  - attr(*, \"row.names\")= int [1:10] 1 2 3 4 5 6 7 8 9 10 ##  - attr(*, \"class\")= chr [1:3] \"GDCprojectsResults\" \"GDCResults\" \"list\" length(ids(presults)) ## [1] 10 presults = pquery %>% results_all() length(ids(presults)) ## [1] 70 # includes all records length(ids(presults)) == count(pquery) ## [1] TRUE"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"fields-and-values","dir":"Articles","previous_headings":"Usage > Querying metadata","what":"Fields and Values","title":"The GenomicDataCommons Package","text":"[ GDC fields documentation ] Central querying retrieving data GDC ability specify fields return, filtering fields values, faceting aggregating. GenomicDataCommons package includes two simple functions, available_fields() default_fields(). can operate character(1) endpoint name (“cases”, “files”, “annotations”, “projects”) GDCQuery object. fields returned query can specified following similar paradigm dplyr package. select() function verb resets fields slot GDCQuery; note quite analogous dplyr select() verb limits already-present fields. completely replace fields using select() GDCQuery. Finding fields interest common operation GenomicDataCommons includes grep_fields() function. See appropriate help pages details.","code":"default_fields('files') ##  [1] \"access\"                         \"acl\"                            ##  [3] \"average_base_quality\"           \"average_insert_size\"            ##  [5] \"average_read_length\"            \"channel\"                        ##  [7] \"chip_id\"                        \"chip_position\"                  ##  [9] \"contamination\"                  \"contamination_error\"            ## [11] \"created_datetime\"               \"data_category\"                  ## [13] \"data_format\"                    \"data_type\"                      ## [15] \"error_type\"                     \"experimental_strategy\"          ## [17] \"file_autocomplete\"              \"file_id\"                        ## [19] \"file_name\"                      \"file_size\"                      ## [21] \"imaging_date\"                   \"magnification\"                  ## [23] \"md5sum\"                         \"mean_coverage\"                  ## [25] \"msi_score\"                      \"msi_status\"                     ## [27] \"pairs_on_diff_chr\"              \"plate_name\"                     ## [29] \"plate_well\"                     \"platform\"                       ## [31] \"proc_internal\"                  \"proportion_base_mismatch\"       ## [33] \"proportion_coverage_10x\"        \"proportion_coverage_10X\"        ## [35] \"proportion_coverage_30x\"        \"proportion_coverage_30X\"        ## [37] \"proportion_reads_duplicated\"    \"proportion_reads_mapped\"        ## [39] \"proportion_targets_no_coverage\" \"read_pair_number\"               ## [41] \"revision\"                       \"stain_type\"                     ## [43] \"state\"                          \"state_comment\"                  ## [45] \"submitter_id\"                   \"tags\"                           ## [47] \"total_reads\"                    \"tumor_ploidy\"                   ## [49] \"tumor_purity\"                   \"type\"                           ## [51] \"updated_datetime\" # The number of fields available for files endpoint length(available_fields('files')) ## [1] 1017 # The first few fields available for files endpoint head(available_fields('files')) ## [1] \"access\"                      \"acl\"                         ## [3] \"analysis.analysis_id\"        \"analysis.analysis_type\"      ## [5] \"analysis.created_datetime\"   \"analysis.input_files.access\" # Default fields here qcases = cases() qcases$fields ##  [1] \"aliquot_ids\"              \"analyte_ids\"              ##  [3] \"case_autocomplete\"        \"case_id\"                  ##  [5] \"consent_type\"             \"created_datetime\"         ##  [7] \"days_to_consent\"          \"days_to_lost_to_followup\" ##  [9] \"diagnosis_ids\"            \"disease_type\"             ## [11] \"index_date\"               \"lost_to_followup\"         ## [13] \"portion_ids\"              \"primary_site\"             ## [15] \"sample_ids\"               \"slide_ids\"                ## [17] \"state\"                    \"submitter_aliquot_ids\"    ## [19] \"submitter_analyte_ids\"    \"submitter_diagnosis_ids\"  ## [21] \"submitter_id\"             \"submitter_portion_ids\"    ## [23] \"submitter_sample_ids\"     \"submitter_slide_ids\"      ## [25] \"updated_datetime\" # set up query to use ALL available fields # Note that checking of fields is done by select() qcases = cases() %>% GenomicDataCommons::select(available_fields('cases')) head(qcases$fields) ## [1] \"case_id\"                       \"aliquot_ids\"                   ## [3] \"analyte_ids\"                   \"annotations.annotation_id\"     ## [5] \"annotations.case_id\"           \"annotations.case_submitter_id\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"facets-and-aggregation","dir":"Articles","previous_headings":"Usage > Querying metadata","what":"Facets and aggregation","title":"The GenomicDataCommons Package","text":"[ GDC facet documentation ] GDC API offers feature known aggregation faceting. specifying one fields (appropriate type), GDC can return us count number records matching potential value. similar R table method. Multiple fields can returned , GDC API cross-tabulation feature; aggregations one field time. Results aggregation() calls come back list data.frames (actually, tibbles). Using aggregations() also easy way learn contents individual fields forms basis faceted search pages.","code":"# total number of files of a specific type res = files() %>% facet(c('type','data_type')) %>% aggregations() res$type ##    doc_count                           key ## 1     215828    annotated_somatic_mutation ## 2     108963                 aligned_reads ## 3      99713       simple_somatic_mutation ## 4      58540           copy_number_segment ## 5      56984          structural_variation ## 6      45801          copy_number_estimate ## 7      35664               gene_expression ## 8      32813   aggregated_somatic_mutation ## 9      32268              mirna_expression ## 10     30075                   slide_image ## 11     27694      masked_methylation_array ## 12     25870        biospecimen_supplement ## 13     14810       masked_somatic_mutation ## 14     13847        methylation_beta_value ## 15     13002           clinical_supplement ## 16      7906            protein_expression ## 17        54 secondary_expression_analysis"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"filtering","dir":"Articles","previous_headings":"Usage > Querying metadata","what":"Filtering","title":"The GenomicDataCommons Package","text":"[ GDC filtering documentation ] GenomicDataCommons package uses form non-standard evaluation specify R-like queries translated R list. R list , upon calling method fetches results GDC API, translated appropriate JSON string. R expression uses formula interface suggested Hadley Wickham vignette non-standard evaluation ’s best use formula formula captures expression evaluate environment evaluation occurs. important expression mixture variables data frame objects local environment [example]. user, details important except note filter expression must begin “~”. limit file type, can refer back section faceting see possible values file field “type”. example, filter file results “gene_expression” files, simply specify filter. want create filter based project (‘TCGA-OVCA’, example)? Well, couple possible ways discover available fields. first based base R functionality intuition. Interestingly, project information “nested” inside case. don’t need know detail know now potential guesses information might files records. need know need construct appropriate filter. note cases.project.project_id looks like good fit. also note TCGA-OV correct project_id, TCGA-OVCA. Note unlike dplyr friends, filter() method replaces filter build previous filters. Asking count() results given new filter criteria gives r qfiles %>% count() results. Filters can chained (nested) accomplish effect multiple & conditionals. count() equivalent & filtering done . Generating manifest bulk downloads simple asking manifest current query. Note might still quite . Looking filenames, suspiciously named files might include “FPKM”, “FPKM-UQ”, “counts”. Another round grep available_fields, looking “type” turned field “analysis.workflow_type” appropriate filter criteria. GDC Data Transfer Tool can used (R, transfer() command-line) orchestrate high-performance, restartable transfers files manifest. See bulk downloads section details.","code":"qfiles = files() qfiles %>% count() # all files ## [1] 819832 qfiles = files() %>% filter( type == 'gene_expression') # here is what the filter looks like after translation str(get_filter(qfiles)) ## List of 2 ##  $ op     : 'scalar' chr \"=\" ##  $ content:List of 2 ##   ..$ field: chr \"type\" ##   ..$ value: chr \"gene_expression\" grep('pro',available_fields('files'),value=TRUE) %>%      head() ## [1] \"analysis.input_files.proc_internal\"            ## [2] \"analysis.input_files.proportion_base_mismatch\" ## [3] \"analysis.input_files.proportion_coverage_10x\"  ## [4] \"analysis.input_files.proportion_coverage_10X\"  ## [5] \"analysis.input_files.proportion_coverage_30x\"  ## [6] \"analysis.input_files.proportion_coverage_30X\" files() %>%      facet('cases.project.project_id') %>%      aggregations() %>%      head() ## $cases.project.project_id ##    doc_count                   key ## 1      54096                 FM-AD ## 2      52659             TCGA-BRCA ## 3      42109               CPTAC-3 ## 4      28359             TCGA-LUAD ## 5      36470             GENIE-MSK ## 6      24402             TCGA-UCEC ## 7      25199             TCGA-HNSC ## 8      24350             TCGA-THCA ## 9      23453               TCGA-OV ## 10     25568             TCGA-LUSC ## 11     24844             TCGA-KIRC ## 12     24724              TCGA-LGG ## 13     24040             TCGA-PRAD ## 14     22166             TCGA-COAD ## 15     19507              TCGA-GBM ## 16     21583             TCGA-SKCM ## 17     21017             TCGA-STAD ## 18     28464            GENIE-DFCI ## 19     19588             TCGA-BLCA ## 20     26854         MMRF-COMMPASS ## 21     19176         TARGET-ALL-P2 ## 22     18099             TCGA-LIHC ## 23     14260             TCGA-CESC ## 24     14266             TCGA-KIRP ## 25     12369             TCGA-SARC ## 26      9291            TARGET-AML ## 27      8739             TCGA-PAAD ## 28      8719             TCGA-ESCA ## 29     11553             REBC-THYR ## 30      8420             TCGA-PCPG ## 31      7670             TCGA-READ ## 32      7199             TCGA-TGCT ## 33      7708             TCGA-LAML ## 34      8868               CPTAC-2 ## 35      5310            TARGET-NBL ## 36      5745             TCGA-THYM ## 37      7563             HCMI-CMDC ## 38      7451     BEATAML1.0-COHORT ## 39      5204         CGCI-HTMCP-CC ## 40      4152              TCGA-ACC ## 41      3691             TCGA-KICH ## 42      3913             TCGA-MESO ## 43      5332               CMI-MBC ## 44      3623              TCGA-UVM ## 45      2266             TARGET-WT ## 46      2849             TARGET-OS ## 47      3577         TARGET-ALL-P3 ## 48      3857             GENIE-MDA ## 49      3833            GENIE-VICC ## 50      2720              TCGA-UCS ## 51      3362          NCICCR-DLBCL ## 52      3320             GENIE-JHU ## 53      2178             TCGA-DLBC ## 54      2212             TCGA-CHOL ## 55      2632             GENIE-UHN ## 56      2139            CGCI-BLGSP ## 57       832             TARGET-RT ## 58      1038            GENIE-GRCC ## 59       910               CMI-ASC ## 60       801             GENIE-NKI ## 61       697            WCDT-MCRPC ## 62       570               CMI-MPC ## 63       558              OHSU-CNL ## 64       538   ORGANOID-PANCREATIC ## 65       362           CTSP-DLBCL1 ## 66       339              TRIO-CRU ## 67       222 BEATAML1.0-CRENOLANIB ## 68       130           TARGET-CCSK ## 69        96         TARGET-ALL-P1 ## 70        21        VAREPOP-APOLLO qfiles = files() %>%     filter( cases.project.project_id == 'TCGA-OV' & type == 'gene_expression') str(get_filter(qfiles)) ## List of 2 ##  $ op     : 'scalar' chr \"and\" ##  $ content:List of 2 ##   ..$ :List of 2 ##   .. ..$ op     : 'scalar' chr \"=\" ##   .. ..$ content:List of 2 ##   .. .. ..$ field: chr \"cases.project.project_id\" ##   .. .. ..$ value: chr \"TCGA-OV\" ##   ..$ :List of 2 ##   .. ..$ op     : 'scalar' chr \"=\" ##   .. ..$ content:List of 2 ##   .. .. ..$ field: chr \"type\" ##   .. .. ..$ value: chr \"gene_expression\" qfiles %>% count() ## [1] 762 qfiles2 = files() %>%     filter( cases.project.project_id == 'TCGA-OV') %>%      filter( type == 'gene_expression')  qfiles2 %>% count() ## [1] 762 (qfiles %>% count()) == (qfiles2 %>% count()) #TRUE ## [1] TRUE manifest_df = qfiles %>% manifest() head(manifest_df) ## # A tibble: 6 × 5 ##   id                                   filename               md5     size state ##   <chr>                                <chr>                  <chr>  <dbl> <chr> ## 1 7c69529f-2273-4dc4-b213-e84924d78bea d6472bd0-b4e2-4ed1-a8… 19d5… 4.25e6 rele… ## 2 0eff4634-f8c4-4db9-8a7c-331b21689bae 42165baf-b32c-4fc4-8b… d89d… 4.26e6 rele… ## 3 7d74b4c5-6391-4b3e-95a3-020ea0869e86 accf08d4-a784-4908-83… fb83… 3.11e6 rele… ## 4 dc2aeea4-3cd0-4623-92f4-bbbc962851cc 8ab508b9-2993-4e66-b8… 2623… 4.61e6 rele… ## 5 0cf852be-d2e3-4fde-bba8-c93efae2961a 93831282-1dd1-49a3-ac… 0507… 4.27e6 rele… ## 6 d33ad23e-2413-419c-8b0b-93ed00583033 bffe7439-0f9b-422f-b0… 1bba… 4.47e6 rele… qfiles = files() %>% filter( ~ cases.project.project_id == 'TCGA-OV' &                             type == 'gene_expression' &                             analysis.workflow_type == 'STAR - Counts') manifest_df = qfiles %>% manifest() nrow(manifest_df) ## [1] 762"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"authentication","dir":"Articles","previous_headings":"Usage","what":"Authentication","title":"The GenomicDataCommons Package","text":"[ GDC authentication documentation ] GDC offers “controlled-access” “open” data. writing, data stored files “controlled-access”; , metadata accessible via GDC “open” data files “open” “controlled-access”. Controlled-access data available going process obtaining access. controlled-access one datasets granted, logging GDC web portal allow access GDC authentication token, can downloaded used access available controlled-access data via GenomicDataCommons package. GenomicDataCommons uses authentication tokens downloading data (see transfer gdcdata documentation). package includes helper function, gdc_token, looks token stored one three ways (resolved order): string stored environment variable, GDC_TOKEN file, stored file named environment variable, GDC_TOKEN_FILE file user home directory, called .gdc_token concrete example:","code":"token = gdc_token() transfer(...,token=token) # or transfer(...,token=get_token())"},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"data-downloads-via-the-gdc-api","dir":"Articles","previous_headings":"Usage > Datafile access and download","what":"Data downloads via the GDC API","title":"The GenomicDataCommons Package","text":"gdcdata function takes character vector one file ids. simple way producing vector produce manifest data frame pass first column, contain file ids. Note controlled-access data, GDC authentication token required. Using BiocParallel package may useful downloading parallel, particularly large numbers smallish files.","code":"fnames = gdcdata(manifest_df$id[1:2],progress=FALSE)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"bulk-downloads","dir":"Articles","previous_headings":"Usage > Datafile access and download","what":"Bulk downloads","title":"The GenomicDataCommons Package","text":"bulk download functionality efficient (v1.2.0 GDC Data Transfer Tool) relatively large files, use approach transferring BAM files larger VCF files, example. Otherwise, consider using approach shown , perhaps parallel.","code":"# Requires gcd_client command-line utility to be isntalled # separately.  fnames = gdcdata(manifest_df$id[3:10], access_method = 'client')"},{"path":[]},{"path":[]},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"how-many-cases-are-there-per-project_id","dir":"Articles","previous_headings":"Use Cases > Cases","what":"How many cases are there per project_id?","title":"The GenomicDataCommons Package","text":"","code":"res = cases() %>% facet(\"project.project_id\") %>% aggregations() head(res) ## $project.project_id ##    doc_count                   key ## 1      18004                 FM-AD ## 2      16824             GENIE-MSK ## 3      14232            GENIE-DFCI ## 4       3857             GENIE-MDA ## 5       3320             GENIE-JHU ## 6       2632             GENIE-UHN ## 7       2145            TARGET-AML ## 8       2052            GENIE-VICC ## 9       1587         TARGET-ALL-P2 ## 10      1132            TARGET-NBL ## 11      1098             TCGA-BRCA ## 12      1038            GENIE-GRCC ## 13       995         MMRF-COMMPASS ## 14       801             GENIE-NKI ## 15       795               CPTAC-3 ## 16       652             TARGET-WT ## 17       617              TCGA-GBM ## 18       608               TCGA-OV ## 19       585             TCGA-LUAD ## 20       583     BEATAML1.0-COHORT ## 21       560             TCGA-UCEC ## 22       537             TCGA-KIRC ## 23       528             TCGA-HNSC ## 24       516              TCGA-LGG ## 25       507             TCGA-THCA ## 26       504             TCGA-LUSC ## 27       500             TCGA-PRAD ## 28       489          NCICCR-DLBCL ## 29       470             TCGA-SKCM ## 30       461             TCGA-COAD ## 31       443             TCGA-STAD ## 32       440             REBC-THYR ## 33       412             TCGA-BLCA ## 34       383             TARGET-OS ## 35       377             TCGA-LIHC ## 36       342               CPTAC-2 ## 37       339              TRIO-CRU ## 38       307             TCGA-CESC ## 39       291             TCGA-KIRP ## 40       261             TCGA-SARC ## 41       212         CGCI-HTMCP-CC ## 42       200               CMI-MBC ## 43       200             TCGA-LAML ## 44       191         TARGET-ALL-P3 ## 45       185             TCGA-ESCA ## 46       185             TCGA-PAAD ## 47       179             TCGA-PCPG ## 48       176              OHSU-CNL ## 49       172             TCGA-READ ## 50       150             TCGA-TGCT ## 51       124             TCGA-THYM ## 52       120            CGCI-BLGSP ## 53       113             TCGA-KICH ## 54       109             HCMI-CMDC ## 55       101            WCDT-MCRPC ## 56        92              TCGA-ACC ## 57        87             TCGA-MESO ## 58        80              TCGA-UVM ## 59        70   ORGANOID-PANCREATIC ## 60        69             TARGET-RT ## 61        58             TCGA-DLBC ## 62        57              TCGA-UCS ## 63        56 BEATAML1.0-CRENOLANIB ## 64        51             TCGA-CHOL ## 65        45           CTSP-DLBCL1 ## 66        36               CMI-ASC ## 67        30               CMI-MPC ## 68        24         TARGET-ALL-P1 ## 69        13           TARGET-CCSK ## 70         7        VAREPOP-APOLLO library(ggplot2) ggplot(res$project.project_id,aes(x = key, y = doc_count)) +     geom_bar(stat='identity') +     theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"how-many-cases-are-included-in-all-target-projects","dir":"Articles","previous_headings":"Use Cases > Cases","what":"How many cases are included in all TARGET projects?","title":"The GenomicDataCommons Package","text":"","code":"cases() %>% filter(~ project.program.name=='TARGET') %>% count() ## [1] 6196"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"how-many-cases-are-included-in-all-tcga-projects","dir":"Articles","previous_headings":"Use Cases > Cases","what":"How many cases are included in all TCGA projects?","title":"The GenomicDataCommons Package","text":"","code":"cases() %>% filter(~ project.program.name=='TCGA') %>% count() ## [1] 11315"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"what-is-the-breakdown-of-sample-types-in-tcga-brca","dir":"Articles","previous_headings":"Use Cases > Cases","what":"What is the breakdown of sample types in TCGA-BRCA?","title":"The GenomicDataCommons Package","text":"","code":"# The need to do the \"&\" here is a requirement of the # current version of the GDC API. I have filed a feature # request to remove this requirement. resp = cases() %>% filter(~ project.project_id=='TCGA-BRCA' &                               project.project_id=='TCGA-BRCA' ) %>%     facet('samples.sample_type') %>% aggregations() resp$samples.sample_type ##   doc_count                  key ## 1      1098        primary tumor ## 2      1011 blood derived normal ## 3       162  solid tissue normal ## 4         7           metastatic"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"fetch-all-samples-in-tcga-brca-that-use-solid-tissue-as-a-normal-","dir":"Articles","previous_headings":"Use Cases > Cases","what":"Fetch all samples in TCGA-BRCA that use “Solid Tissue” as a normal.","title":"The GenomicDataCommons Package","text":"","code":"# The need to do the \"&\" here is a requirement of the # current version of the GDC API. I have filed a feature # request to remove this requirement. resp = cases() %>% filter(~ project.project_id=='TCGA-BRCA' &                               samples.sample_type=='Solid Tissue Normal') %>%     GenomicDataCommons::select(c(default_fields(cases()),'samples.sample_type')) %>%     response_all() count(resp) ## [1] 162 res = resp %>% results() str(res[1],list.len=6) ## List of 1 ##  $ id: chr [1:162] \"f6eebd4b-b63a-4a9c-92d3-0d954a8a6655\" \"37242f5a-25ae-4b1f-9ce6-09ce1dc92539\" \"5d1d00c6-fcae-479e-ae1e-de76efd41d98\" \"ef4cbd38-bc79-4d60-a715-647edd2ebe9e\" ... head(ids(resp)) ## [1] \"f6eebd4b-b63a-4a9c-92d3-0d954a8a6655\" ## [2] \"37242f5a-25ae-4b1f-9ce6-09ce1dc92539\" ## [3] \"5d1d00c6-fcae-479e-ae1e-de76efd41d98\" ## [4] \"ef4cbd38-bc79-4d60-a715-647edd2ebe9e\" ## [5] \"d3a75976-67d3-40fa-9f6f-cf2a3d7b773c\" ## [6] \"f130f376-5801-40f9-975d-a7e2f7b5670d\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"get-all-tcga-case-ids-that-are-female","dir":"Articles","previous_headings":"Use Cases > Cases","what":"Get all TCGA case ids that are female","title":"The GenomicDataCommons Package","text":"","code":"cases() %>%   GenomicDataCommons::filter(~ project.program.name == 'TCGA' &     \"cases.demographic.gender\" %in% \"female\") %>%       GenomicDataCommons::results(size = 4) %>%         ids() ## [1] \"bcb21cdd-2f57-4df0-bbbe-a74fa5a654d6\" ## [2] \"81dac02c-6e5f-4afe-9c90-12b5a4f26594\" ## [3] \"cc2a014b-fb3c-4839-a5fb-6c40e745df1b\" ## [4] \"368fd5c9-cd4b-4326-a47b-4d72938cfb8f\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"get-all-tcga-coad-case-ids-that-are-not-female","dir":"Articles","previous_headings":"Use Cases > Cases","what":"Get all TCGA-COAD case ids that are NOT female","title":"The GenomicDataCommons Package","text":"","code":"cases() %>%   GenomicDataCommons::filter(~ project.project_id == 'TCGA-COAD' &     \"cases.demographic.gender\" %exclude% \"female\") %>%       GenomicDataCommons::results(size = 4) %>%         ids() ## [1] \"14efca0c-882d-4fba-b15c-64af6e213b80\" ## [2] \"d7ba64d7-b4e5-488d-9f28-bcb7bf3c0f35\" ## [3] \"1ad0b9b9-7ded-4281-b114-9dcc6138c037\" ## [4] \"93edb105-5dc9-4a4a-9fca-c91f0161fcc7\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"get-all-tcga-cases-that-are-missing-gender","dir":"Articles","previous_headings":"Use Cases > Cases","what":"Get all TCGA cases that are missing gender","title":"The GenomicDataCommons Package","text":"","code":"cases() %>%   GenomicDataCommons::filter(~ project.program.name == 'TCGA' &     missing(\"cases.demographic.gender\")) %>%       GenomicDataCommons::results(size = 4) %>%         ids() ## [1] \"375436b3-66ac-4d5e-b495-18a96d812a69\" ## [2] \"515a062e-f68e-4100-a923-bd2ce0bbe071\" ## [3] \"a9e4b6db-8b4b-4345-a4a1-d63175eb0174\" ## [4] \"7f08f522-08ff-4b30-aa5b-e69cf15041c9\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"get-all-tcga-cases-that-are-not-missing-gender","dir":"Articles","previous_headings":"Use Cases > Cases","what":"Get all TCGA cases that are NOT missing gender","title":"The GenomicDataCommons Package","text":"","code":"cases() %>%   GenomicDataCommons::filter(~ project.program.name == 'TCGA' &     !missing(\"cases.demographic.gender\")) %>%       GenomicDataCommons::results(size = 4) %>%         ids() ## [1] \"bcb21cdd-2f57-4df0-bbbe-a74fa5a654d6\" ## [2] \"81dac02c-6e5f-4afe-9c90-12b5a4f26594\" ## [3] \"cc2a014b-fb3c-4839-a5fb-6c40e745df1b\" ## [4] \"cb005c69-7301-41ce-b534-c9751f1436c5\""},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"how-many-of-each-type-of-file-are-available","dir":"Articles","previous_headings":"Use Cases > Files","what":"How many of each type of file are available?","title":"The GenomicDataCommons Package","text":"","code":"res = files() %>% facet('type') %>% aggregations() res$type ##    doc_count                           key ## 1     215828    annotated_somatic_mutation ## 2     108963                 aligned_reads ## 3      99713       simple_somatic_mutation ## 4      58540           copy_number_segment ## 5      56984          structural_variation ## 6      45801          copy_number_estimate ## 7      35664               gene_expression ## 8      32813   aggregated_somatic_mutation ## 9      32268              mirna_expression ## 10     30075                   slide_image ## 11     27694      masked_methylation_array ## 12     25870        biospecimen_supplement ## 13     14810       masked_somatic_mutation ## 14     13847        methylation_beta_value ## 15     13002           clinical_supplement ## 16      7906            protein_expression ## 17        54 secondary_expression_analysis ggplot(res$type,aes(x = key,y = doc_count)) + geom_bar(stat='identity') +     theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"find-gene-level-rna-seq-quantification-files-for-gbm","dir":"Articles","previous_headings":"Use Cases > Files","what":"Find gene-level RNA-seq quantification files for GBM","title":"The GenomicDataCommons Package","text":"","code":"q = files() %>%     GenomicDataCommons::select(available_fields('files')) %>%     filter(~ cases.project.project_id=='TCGA-GBM' &                data_type=='Gene Expression Quantification') q %>% facet('analysis.workflow_type') %>% aggregations() ## list() # so need to add another filter file_ids = q %>% filter(~ cases.project.project_id=='TCGA-GBM' &                             data_type=='Gene Expression Quantification' &                             analysis.workflow_type == 'STAR - Counts') %>%     GenomicDataCommons::select('file_id') %>%     response_all() %>%     ids()"},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"get-all-bam-file-ids-from-tcga-gbm","dir":"Articles","previous_headings":"Use Cases > Slicing","what":"Get all BAM file ids from TCGA-GBM","title":"The GenomicDataCommons Package","text":"need figure slicing reproducibly testing environment vignette building.","code":"q = files() %>%     GenomicDataCommons::select(available_fields('files')) %>%     filter(~ cases.project.project_id == 'TCGA-GBM' &                data_type == 'Aligned Reads' &                experimental_strategy == 'RNA-Seq' &                data_format == 'BAM') file_ids = q %>% response_all() %>% ids() bamfile = slicing(file_ids[1],regions=\"chr12:6534405-6538375\",token=gdc_token()) library(GenomicAlignments) aligns = readGAlignments(bamfile)"},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"ssl-connection-errors","dir":"Articles","previous_headings":"Troubleshooting","what":"SSL connection errors","title":"The GenomicDataCommons Package","text":"Symptom: Trying connect API results : [Mac OS], [Ubuntu] [Centos/RHEL]. upgrading openssl, reinstall R curl httr packages.","code":"Error in curl::curl_fetch_memory(url, handle = handle) : SSL connect error"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"The GenomicDataCommons Package","text":"","code":"sessionInfo() ## R version 4.2.0 (2022-04-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] ggplot2_3.3.5             GenomicDataCommons_1.21.1 ## [3] magrittr_2.0.3            knitr_1.39                ## [5] BiocStyle_2.24.0          ##  ## loaded via a namespace (and not attached): ##  [1] assertthat_0.2.1       rprojroot_2.0.3        digest_0.6.29          ##  [4] utf8_1.2.2             R6_2.5.1               GenomeInfoDb_1.32.0    ##  [7] stats4_4.2.0           evaluate_0.15          highr_0.9              ## [10] httr_1.4.2             pillar_1.7.0           zlibbioc_1.42.0        ## [13] rlang_1.0.2            curl_4.3.2             jquerylib_0.1.4        ## [16] S4Vectors_0.34.0       rmarkdown_2.14         pkgdown_2.0.3          ## [19] labeling_0.4.2         textshaping_0.3.6      desc_1.4.1             ## [22] readr_2.1.2            stringr_1.4.0          munsell_0.5.0          ## [25] RCurl_1.98-1.6         bit_4.0.4              compiler_4.2.0         ## [28] xfun_0.30              pkgconfig_2.0.3        systemfonts_1.0.4      ## [31] BiocGenerics_0.42.0    htmltools_0.5.2        tidyselect_1.1.2       ## [34] tibble_3.1.6           GenomeInfoDbData_1.2.8 bookdown_0.26          ## [37] IRanges_2.30.0         fansi_1.0.3            crayon_1.5.1           ## [40] dplyr_1.0.8            tzdb_0.3.0             withr_2.5.0            ## [43] bitops_1.0-7           rappdirs_0.3.3         grid_4.2.0             ## [46] gtable_0.3.0           jsonlite_1.8.0         lifecycle_1.0.1        ## [49] DBI_1.1.2              scales_1.2.0           cli_3.3.0              ## [52] stringi_1.7.6          vroom_1.5.7            cachem_1.0.6           ## [55] farver_2.1.0           XVector_0.36.0         fs_1.5.2               ## [58] xml2_1.3.3             bslib_0.3.1            ellipsis_0.3.2         ## [61] ragg_1.2.2             generics_0.1.2         vctrs_0.4.1            ## [64] tools_4.2.0            bit64_4.0.5            glue_1.6.2             ## [67] purrr_0.3.4            hms_1.1.1              parallel_4.2.0         ## [70] fastmap_1.1.0          yaml_2.3.5             colorspace_2.0-3       ## [73] BiocManager_1.30.17    GenomicRanges_1.48.0   memoise_2.0.1          ## [76] sass_0.4.1"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/overview.html","id":"developer-notes","dir":"Articles","previous_headings":"","what":"Developer notes","title":"The GenomicDataCommons Package","text":"S3 object-oriented programming paradigm used. adopted functional programming style functions methods often take “object” first argument. style lends pipeline-style programming. GenomicDataCommons package uses alternative request format (POST) allow large request bodies.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/questions-and-answers.html","id":"how-could-i-generate-a-manifest-file-with-filtering-of-race-and-ethnicity","dir":"Articles","previous_headings":"","what":"How could I generate a manifest file with filtering of Race and Ethnicity?","title":"Questions and answers from over the years","text":"https://support.bioconductor.org/p/9138939/. made small change filtering expression approach based changes lazy evaluation best practices. now need include ~ filter expression. : get count results: manifest. question race ethnicity good one. can grep race ethnic get potential matching fields look . Now, can check available values field determine complete filter expressions. can complete filter expression now limit white race .","code":"library(GenomicDataCommons,quietly = TRUE) ##  ## Attaching package: 'GenomicDataCommons' ## The following object is masked from 'package:stats': ##  ##     filter q = files() %>%   GenomicDataCommons::filter(     cases.project.project_id == 'TCGA-COAD' &       data_type == 'Aligned Reads' &       experimental_strategy == 'RNA-Seq' &       data_format == 'BAM') count(q) ## [1] 1183 manifest(q) ## # A tibble: 1,183 × 5 ##    id                                   filename             md5      size state ##  * <chr>                                <chr>                <chr>   <dbl> <chr> ##  1 0638c43d-ace4-4acf-8a99-b1cbe34b73d4 e074ff82-1def-4bfc-… 3899… 9.19e 7 rele… ##  2 e730e97c-c9af-45a1-9bed-3ea3d5a31075 1a7a23fc-67d0-47d7-… f40e… 8.75e 9 rele… ##  3 707f452a-a23e-4d2b-96d2-5e9101f6ff5c e074ff82-1def-4bfc-… 51c0… 6.42e 9 rele… ##  4 fea4d7c0-1eeb-466b-9b58-8e91535f3e3d 90242448-2567-4d5b-… 0872… 7.11e 7 rele… ##  5 fa10a537-7293-4803-844f-e0f9273eea15 2db6d1af-ff0c-468f-… 1ab9… 9.77e 9 rele… ##  6 95d17a59-f986-41a6-906b-f8e7d7c93649 bf93be3e-d4f1-4efb-… 0b79… 2.28e 9 rele… ##  7 64dc1cf1-30cd-4780-87d4-a0a53d2b8e71 88a33f23-72a0-439b-… 39b0… 1.20e10 rele… ##  8 79ec6ebe-5854-4431-86cc-346ac8632626 88a33f23-72a0-439b-… 0f63… 6.83e 7 rele… ##  9 a2b0827d-05d6-4611-8e01-359547b11f57 8fba9293-e3f1-41ef-… 61bd… 1.51e10 rele… ## 10 aea7eb73-bbb3-423a-8477-69464d8f46f3 8fba9293-e3f1-41ef-… 33be… 8.08e 9 rele… ## # … with 1,173 more rows all_fields = available_fields(files()) grep('race|ethnic',all_fields,value=TRUE) ## [1] \"cases.demographic.ethnicity\"                  ## [2] \"cases.demographic.race\"                       ## [3] \"cases.follow_ups.hormonal_contraceptive_type\" ## [4] \"cases.follow_ups.hormonal_contraceptive_use\"  ## [5] \"cases.follow_ups.scan_tracer_used\" available_values('files',\"cases.demographic.ethnicity\") ## [1] \"not hispanic or latino\" \"not reported\"           \"hispanic or latino\"     ## [4] \"unknown\"                \"not allowed to collect\" \"_missing\" available_values('files',\"cases.demographic.race\") ##  [1] \"white\"                                     ##  [2] \"not reported\"                              ##  [3] \"black or african american\"                 ##  [4] \"asian\"                                     ##  [5] \"unknown\"                                   ##  [6] \"other\"                                     ##  [7] \"not allowed to collect\"                    ##  [8] \"american indian or alaska native\"          ##  [9] \"native hawaiian or other pacific islander\" ## [10] \"_missing\" q_white_only = q %>%   GenomicDataCommons::filter(cases.demographic.race=='white') count(q_white_only) ## [1] 691 manifest(q_white_only) ## # A tibble: 691 × 5 ##    id                                   filename             md5      size state ##  * <chr>                                <chr>                <chr>   <dbl> <chr> ##  1 e730e97c-c9af-45a1-9bed-3ea3d5a31075 1a7a23fc-67d0-47d7-… f40e… 8.75e 9 rele… ##  2 fea4d7c0-1eeb-466b-9b58-8e91535f3e3d 90242448-2567-4d5b-… 0872… 7.11e 7 rele… ##  3 a2b0827d-05d6-4611-8e01-359547b11f57 8fba9293-e3f1-41ef-… 61bd… 1.51e10 rele… ##  4 aea7eb73-bbb3-423a-8477-69464d8f46f3 8fba9293-e3f1-41ef-… 33be… 8.08e 9 rele… ##  5 980b340a-71e2-4e31-b41b-dc273ffcd635 8fba9293-e3f1-41ef-… 97b5… 1.01e 8 rele… ##  6 1f41925d-d70a-470c-998f-35d6b28ae099 63bab58e-1dfd-43df-… 3c4e… 2.10e10 rele… ##  7 6f4370b2-6c7f-4550-83ec-cc9ab50a34b7 63bab58e-1dfd-43df-… 10d6… 9.55e 7 rele… ##  8 4dbe8520-3ca8-4d0e-ad9a-0fd794d0e261 63bab58e-1dfd-43df-… 3ace… 9.70e 9 rele… ##  9 85535fab-ba49-4b3e-b372-08c15a997042 f40a9044-a36a-4091-… 6b0d… 1.23e10 rele… ## 10 008b411e-7de8-46f2-9ad8-185cd49ee2e6 f40a9044-a36a-4091-… 9598… 5.84e 9 rele… ## # … with 681 more rows"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/questions-and-answers.html","id":"how-can-i-get-the-number-of-cases-with-rna-seq-data-added-by-date-to-tcga-project-with-genomicdatacommons","dir":"Articles","previous_headings":"","what":"How can I get the number of cases with RNA-Seq data added by date to TCGA project with GenomicDataCommons?","title":"Questions and answers from over the years","text":"https://support.bioconductor.org/p/9135791/ like get number cases added (created, logical datetime suffice ) TCGA project experiment type. attempted get data via GenomicDataCommons package, giving believe number files given experiment type rather number cases. can get number cases RNA-Seq data?","code":"library(tibble) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:GenomicDataCommons': ##  ##     count, filter, select ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(GenomicDataCommons)  cases() %>%    GenomicDataCommons::filter(~ project.program.name=='TCGA' &                                 files.experimental_strategy=='RNA-Seq') %>%    facet(c(\"files.created_datetime\")) %>%    aggregations() %>%    .[[1]] %>%    as_tibble() %>%   dplyr::arrange(dplyr::desc(key)) ## # A tibble: 200 × 2 ##    doc_count key                              ##        <int> <chr>                            ##  1       362 2021-04-05t12:48:23.926301-05:00 ##  2       438 2021-04-05t08:30:00.775501-05:00 ##  3       374 2021-04-05t08:29:15.674486-05:00 ##  4       305 2021-04-05t08:26:08.920845-05:00 ##  5       349 2021-04-05t08:22:48.913195-05:00 ##  6       351 2021-04-05t08:21:59.240799-05:00 ##  7       269 2021-04-05t08:21:27.725962-05:00 ##  8       325 2021-04-05t08:20:56.849817-05:00 ##  9       428 2021-04-05t08:20:25.746896-05:00 ## 10       214 2021-04-05t08:19:48.312949-05:00 ## # … with 190 more rows"},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/somatic_mutations.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Working with simple somatic mutations","text":"","code":"library(GenomicDataCommons) library(tibble)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/somatic_mutations.html","id":"genes-and-gene-details","dir":"Articles","previous_headings":"Workflow","what":"Genes and gene details","title":"Working with simple somatic mutations","text":"","code":"grep_fields('genes', 'symbol') ## [1] \"symbol\" head(available_values('genes','symbol')) ## [1] \"y_rna\"  \"ccdc39\" \"matr3\"  \"a1bg\"   \"a1cf\"   \"a2m\" tp53 = genes() %>%    GenomicDataCommons::filter(symbol=='TP53') %>%    results(size=10000) %>%    as_tibble()"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/somatic_mutations.html","id":"ssms","dir":"Articles","previous_headings":"Workflow","what":"ssms","title":"Working with simple somatic mutations","text":"","code":"ssms() %>%      GenomicDataCommons::filter(       chromosome==paste0('chr',tp53$gene_chromosome[1]) &         start_position > tp53$gene_start[1] &          end_position < tp53$gene_end[1]) %>%      GenomicDataCommons::count() ## [1] 1290 ssms() %>%      GenomicDataCommons::filter(       consequence.transcript.gene.symbol %in% c('TP53')) %>%      GenomicDataCommons::count() ## [1] 1288"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/somatic_mutations.html","id":"convert-to-vranges","dir":"Articles","previous_headings":"Workflow","what":"convert to VRanges","title":"Working with simple somatic mutations","text":"","code":"library(VariantAnnotation) vars = ssms() %>%      GenomicDataCommons::filter(       consequence.transcript.gene.symbol %in% c('TP53')) %>%      GenomicDataCommons::results_all() %>%     as_tibble() vr = VRanges(seqnames = vars$chromosome,              ranges = IRanges(start=vars$start_position, width=1),              ref = vars$reference_allele,              alt = vars$tumor_allele) ssm_occurrences() %>%      GenomicDataCommons::filter(       ssm.consequence.transcript.gene.symbol %in% c('TP53')) %>%      GenomicDataCommons::count() ## [1] 5030 var_samples = ssm_occurrences() %>%      GenomicDataCommons::filter(       ssm.consequence.transcript.gene.symbol %in% c('TP53')) %>%      GenomicDataCommons::expand(c('case', 'ssm', 'case.project')) %>%     GenomicDataCommons::results_all() %>%      as_tibble() table(var_samples$case$disease_type) ##  ##                       Acinar Cell Neoplasms  ##                                           7  ##                Adenomas and Adenocarcinomas  ##                                        1467  ##        Adnexal and Skin Appendage Neoplasms  ##                                           1  ##                Complex Epithelial Neoplasms  ##                                          16  ##         Complex Mixed and Stromal Neoplasms  ##                                          69  ##       Cystic, Mucinous and Serous Neoplasms  ##                                         630  ##                Ductal and Lobular Neoplasms  ##                                         616  ##                   Epithelial Neoplasms, NOS  ##                                           9  ##                       Fibromatous Neoplasms  ##                                          12  ##                         Germ Cell Neoplasms  ##                                           1  ##                                     Gliomas  ##                                         483  ##                        Lipomatous Neoplasms  ##                                           6  ##                          Lymphoid Leukemias  ##                                           2  ##                     Mature B-Cell Lymphomas  ##                                           5  ##                       Mesothelial Neoplasms  ##                                          11  ##                   Miscellaneous Bone Tumors  ##                                           1  ##                           Myeloid Leukemias  ##                                          10  ##                         Myomatous Neoplasms  ##                                          59  ##                         Nerve Sheath Tumors  ##                                           1  ##                          Nevi and Melanomas  ##                                          85  ##                                Not Reported  ##                                           9  ##                          Plasma Cell Tumors  ##                                          60  ##        Soft Tissue Tumors and Sarcomas, NOS  ##                                          32  ##                     Squamous Cell Neoplasms  ##                                        1208  ##                 Thymic Epithelial Neoplasms  ##                                           4  ## Transitional Cell Papillomas and Carcinomas  ##                                         226"},{"path":"http://bioconductor.github.io/GenomicDataCommons/articles/somatic_mutations.html","id":"oncoprint","dir":"Articles","previous_headings":"Workflow","what":"OncoPrint","title":"Working with simple somatic mutations","text":"","code":"fnames <- files() %>%   GenomicDataCommons::filter(     cases.project.project_id=='TCGA-SKCM' &       data_format=='maf' &       data_type=='Masked Somatic Mutation' &       analysis.workflow_type ==         'Aliquot Ensemble Somatic Variant Merging and Masking'   ) %>%   results(size = 6) %>%     ids() %>%        gdcdata() library(maftools) melanoma = read.maf(maf = fnames[2]) ## -Reading ## -Validating ## -Silent variants: 200  ## -Summarizing ## -Processing clinical data ## --Missing clinical data ## -Finished in 0.282s elapsed (0.277s cpu) maftools::oncoplot(melanoma) ## Warning in min(x): no non-missing arguments to min; returning Inf ## Warning in max(x): no non-missing arguments to max; returning -Inf"},{"path":"http://bioconductor.github.io/GenomicDataCommons/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author. Sean Davis. Author, maintainer. Marcel Ramos. Contributor.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M, Davis S (2022). GenomicDataCommons: NIH / NCI Genomic Data Commons Access. https://bioconductor.org/packages/GenomicDataCommons, http://github.com/Bioconductor/GenomicDataCommons, http://bioconductor.github.io/GenomicDataCommons/.","code":"@Manual{,   title = {GenomicDataCommons: NIH / NCI Genomic Data Commons Access},   author = {Martin Morgan and Sean Davis},   year = {2022},   note = {https://bioconductor.org/packages/GenomicDataCommons, http://github.com/Bioconductor/GenomicDataCommons, http://bioconductor.github.io/GenomicDataCommons/}, }"},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"what-is-the-gdc","dir":"","previous_headings":"","what":"What is the GDC?","title":"NIH / NCI Genomic Data Commons Access","text":"Genomic Data Commons (GDC) website: National Cancer Institute’s (NCI’s) Genomic Data Commons (GDC) data sharing platform promotes precision medicine oncology. just database tool; expandable knowledge network supporting import standardization genomic clinical data cancer research programs. GDC contains NCI-generated data largest comprehensive cancer genomic datasets, including Cancer Genome Atlas (TCGA) Therapeutically Applicable Research Generate Effective Therapies (TARGET). first time, datasets harmonized using common set bioinformatics pipelines, data can directly compared. growing knowledge system cancer, GDC also enables researchers submit data, harmonizes data import GDC. researchers add clinical genomic data GDC, become even powerful tool making discoveries molecular basis cancer may lead better care patients. data model GDC complex, worth quick overview. data model encoded -called property graph. Nodes represent entities Projects, Cases, Diagnoses, Files (various kinds), Annotations. relationships entities maintained edges. nodes edges may Properties supply instance details. GDC API exposes nodes edges somewhat simplified set RESTful endpoints.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"NIH / NCI Genomic Data Commons Access","text":"software available Bioconductor.org can downloaded via BiocManager::install. report bugs problems, either submit new issue submit bug.report(package='GenomicDataCommons') within R (redirect new issue GitHub).","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"NIH / NCI Genomic Data Commons Access","text":"Installation can achieved via Bioconductor’s BiocManager package.","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\")  BiocManager::install('GenomicDataCommons') library(GenomicDataCommons)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"check-basic-functionality","dir":"","previous_headings":"","what":"Check basic functionality","title":"NIH / NCI Genomic Data Commons Access","text":"","code":"status() #> $commit #> [1] \"d05a8530c733492e038fc2c3fda7c47a000652df\" #>  #> $data_release #> [1] \"Data Release 32.0 - March 29, 2022\" #>  #> $status #> [1] \"OK\" #>  #> $tag #> [1] \"3.0.0\" #>  #> $version #> [1] 1"},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"find-data","dir":"","previous_headings":"","what":"Find data","title":"NIH / NCI Genomic Data Commons Access","text":"following code builds manifest can used guide download raw data. , filtering finds gene expression files quantified raw counts using STAR ovarian cancer patients.","code":"ge_manifest <- files() |>     filter( cases.project.project_id == 'TCGA-OV') |>     filter( type == 'gene_expression' ) |>     filter( analysis.workflow_type == 'STAR - Counts') |>     manifest() ge_manifest #> # A tibble: 762 × 5 #>    id                                   filename              md5     size state #>  * <chr>                                <chr>                 <chr>  <dbl> <chr> #>  1 7c69529f-2273-4dc4-b213-e84924d78bea d6472bd0-b4e2-4ed1-a… 19d5… 4.25e6 rele… #>  2 0eff4634-f8c4-4db9-8a7c-331b21689bae 42165baf-b32c-4fc4-8… d89d… 4.26e6 rele… #>  3 7d74b4c5-6391-4b3e-95a3-020ea0869e86 accf08d4-a784-4908-8… fb83… 3.11e6 rele… #>  4 dc2aeea4-3cd0-4623-92f4-bbbc962851cc 8ab508b9-2993-4e66-b… 2623… 4.61e6 rele… #>  5 0cf852be-d2e3-4fde-bba8-c93efae2961a 93831282-1dd1-49a3-a… 0507… 4.27e6 rele… #>  6 d33ad23e-2413-419c-8b0b-93ed00583033 bffe7439-0f9b-422f-b… 1bba… 4.47e6 rele… #>  7 d4cc00b7-5a9a-4efa-8334-708dbefe76fa fb8ee269-a38b-47ef-b… 2044… 4.25e6 rele… #>  8 1b45742e-4c91-4b8f-8a2b-f144479557a4 cd96deaf-e1fa-40b4-8… 92d5… 3.80e6 rele… #>  9 a1ea0a4b-cd16-4436-9e9f-dd7e718ee858 fb8ee269-a38b-47ef-b… 5980… 3.46e6 rele… #> 10 fbeb5543-22e0-49e0-a77c-f050e748315c 09afd98b-1da0-4de9-b… 1438… 4.23e6 rele… #> # … with 752 more rows"},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"download-data","dir":"","previous_headings":"","what":"Download data","title":"NIH / NCI Genomic Data Commons Access","text":"code block downloads 762 gene expression files specified query . Using multiple processes download significantly speeds transfer many cases. following completes 15 seconds. download included controlled-access data, download needed include token. Details available authentication section .","code":"library(BiocParallel) register(MulticoreParam()) destdir <- tempdir() fnames <- lapply(ge_manifest$id,gdcdata)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"metadata-queries","dir":"","previous_headings":"","what":"Metadata queries","title":"NIH / NCI Genomic Data Commons Access","text":"use couple ad-hoc helper functions handle output query. See inst/script/README.Rmd folder source. First, create data.frame clinical data: Note diagnoses data multiple lines per patient:","code":"expands <- c(\"diagnoses\",\"annotations\",              \"demographic\",\"exposures\") clinResults <- cases() |>     GenomicDataCommons::select(NULL) |>     GenomicDataCommons::expand(expands) |>     results(size=6) demoDF <- filterAllNA(clinResults$demographic) exposuresDF <- bindrowname(clinResults$exposures) demoDF[, 1:4] #>                                      cause_of_death  race gender #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e Cancer Related white female #> d420e653-3fb2-432b-9e81-81232a80264d Cancer Related white female #> bfe15f44-e1dd-46ed-b429-908822d0a781           <NA> white   male #> 8b3b1f24-419e-4043-82be-2bd41268bb0e           <NA> white female #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8 Cancer Related white   male #> 47322ea3-6bbe-442b-a656-c48469cc99c1           <NA> white   male #>                                                   ethnicity #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e                Unknown #> d420e653-3fb2-432b-9e81-81232a80264d not hispanic or latino #> bfe15f44-e1dd-46ed-b429-908822d0a781 not hispanic or latino #> 8b3b1f24-419e-4043-82be-2bd41268bb0e not hispanic or latino #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8                Unknown #> 47322ea3-6bbe-442b-a656-c48469cc99c1 not hispanic or latino exposuresDF[, 1:4] #>                                      alcohol_days_per_week #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e                    NA #> d420e653-3fb2-432b-9e81-81232a80264d                    NA #> bfe15f44-e1dd-46ed-b429-908822d0a781                    NA #> 8b3b1f24-419e-4043-82be-2bd41268bb0e                    NA #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8                     0 #> 47322ea3-6bbe-442b-a656-c48469cc99c1                    NA #>                                                alcohol_drinks_per_day #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e 2020-07-31T09:25:24.402855-05:00 #> d420e653-3fb2-432b-9e81-81232a80264d 2020-02-27T13:00:21.361098-06:00 #> bfe15f44-e1dd-46ed-b429-908822d0a781 2020-02-27T12:37:46.290948-06:00 #> 8b3b1f24-419e-4043-82be-2bd41268bb0e 2019-05-15T13:02:25.351730-05:00 #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8 2020-06-15T12:57:49.021995-05:00 #> 47322ea3-6bbe-442b-a656-c48469cc99c1 2020-09-17T16:10:31.527022-05:00 #>                                      smokeless_tobacco_quit_age #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e                       <NA> #> d420e653-3fb2-432b-9e81-81232a80264d                       <NA> #> bfe15f44-e1dd-46ed-b429-908822d0a781                       <NA> #> 8b3b1f24-419e-4043-82be-2bd41268bb0e                       <NA> #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8                         No #> 47322ea3-6bbe-442b-a656-c48469cc99c1                       <NA> #>                                      created_datetime #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e                4 #> d420e653-3fb2-432b-9e81-81232a80264d                1 #> bfe15f44-e1dd-46ed-b429-908822d0a781                1 #> 8b3b1f24-419e-4043-82be-2bd41268bb0e                1 #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8                7 #> 47322ea3-6bbe-442b-a656-c48469cc99c1                2 diagDF <- bindrowname(clinResults$diagnoses) diagDF[, 1:4] #>                                        gleason_patterns_percent #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e                       <NA> #> d420e653-3fb2-432b-9e81-81232a80264d                       <NA> #> bfe15f44-e1dd-46ed-b429-908822d0a781                    Stage I #> 8b3b1f24-419e-4043-82be-2bd41268bb0e                    Stage I #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8                   Stage IV #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8.1                     <NA> #> 47322ea3-6bbe-442b-a656-c48469cc99c1                  Stage IIB #> 47322ea3-6bbe-442b-a656-c48469cc99c1.1                     <NA> #>                                                   ajcc_pathologic_stage #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e   2020-07-31T09:25:24.402855-05:00 #> d420e653-3fb2-432b-9e81-81232a80264d   2020-02-27T13:00:21.361098-06:00 #> bfe15f44-e1dd-46ed-b429-908822d0a781   2020-02-27T12:37:46.290948-06:00 #> 8b3b1f24-419e-4043-82be-2bd41268bb0e   2019-05-15T13:02:25.351730-05:00 #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8   2020-06-15T12:57:49.021995-05:00 #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8.1 2020-06-15T12:57:49.021995-05:00 #> 47322ea3-6bbe-442b-a656-c48469cc99c1   2020-09-17T16:10:31.527022-05:00 #> 47322ea3-6bbe-442b-a656-c48469cc99c1.1 2020-09-17T16:10:31.527022-05:00 #>                                        ann_arbor_clinical_stage #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e                Rectum, NOS #> d420e653-3fb2-432b-9e81-81232a80264d                 Brain, NOS #> bfe15f44-e1dd-46ed-b429-908822d0a781                 Colon, NOS #> 8b3b1f24-419e-4043-82be-2bd41268bb0e                Rectum, NOS #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8                  Bone, NOS #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8.1                Bone, NOS #> 47322ea3-6bbe-442b-a656-c48469cc99c1                  Skin, NOS #> 47322ea3-6bbe-442b-a656-c48469cc99c1.1                Skin, NOS #>                                        created_datetime #> 4829dd8c-5445-41b3-ae37-bbcc333e8c9e              17316 #> d420e653-3fb2-432b-9e81-81232a80264d              19586 #> bfe15f44-e1dd-46ed-b429-908822d0a781              27431 #> 8b3b1f24-419e-4043-82be-2bd41268bb0e              25784 #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8               3585 #> fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8.1             4038 #> 47322ea3-6bbe-442b-a656-c48469cc99c1              22537 #> 47322ea3-6bbe-442b-a656-c48469cc99c1.1            22597"},{"path":"http://bioconductor.github.io/GenomicDataCommons/index.html","id":"basic-design","dir":"","previous_headings":"","what":"Basic design","title":"NIH / NCI Genomic Data Commons Access","text":"package design meant similarities “tidyverse” approach dplyr. Roughly, functionality finding accessing files metadata can divided : Simple query constructors based GDC API endpoints. set verbs applied, adjust filtering, field selection, faceting (fields aggregation) result new query object (endomorphism) set verbs take query return results GDC addition, auxiliary functions asking GDC API information available default fields, slicing BAM files, downloading actual data files. overview functionality1. projects() cases() files() annotations() filter() facet() select() mapping() available_fields() default_fields() grep_fields() available_values() available_expand() results() count() response() gdcdata() transfer() gdc_client() aggregations() gdc_token() slicing()","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/GenomicDataCommons.html","id":null,"dir":"Reference","previous_headings":"","what":"ncigdc: A package for computating the notorious bar statistic. — GenomicDataCommons","title":"ncigdc: A package for computating the notorious bar statistic. — GenomicDataCommons","text":"Cool package interfacing NCI GDC","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/GenomicDataCommons.html","id":"finding-data","dir":"Reference","previous_headings":"","what":"finding data","title":"ncigdc: A package for computating the notorious bar statistic. — GenomicDataCommons","text":"query cases projects files annotations mapping","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/GenomicDataCommons.html","id":"downloading-data","dir":"Reference","previous_headings":"","what":"downloading data","title":"ncigdc: A package for computating the notorious bar statistic. — GenomicDataCommons","text":"data","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/aggregations.html","id":null,"dir":"Reference","previous_headings":"","what":"aggregations — aggregations","title":"aggregations — aggregations","text":"aggregations","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/aggregations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aggregations — aggregations","text":"","code":"aggregations(x)  # S3 method for GDCQuery aggregations(x)  # S3 method for GDCResponse aggregations(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/aggregations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aggregations — aggregations","text":"x GDCQuery object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/aggregations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aggregations — aggregations","text":"list data.frame one member requested facet. data frames two columns, key doc_count.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/aggregations.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"aggregations — aggregations","text":"GDCQuery: GDCResponse:","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/aggregations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aggregations — aggregations","text":"","code":"library(magrittr) # Number of each file type res = files() %>% facet(c('type','data_type')) %>% aggregations() res$type #>    doc_count                           key #> 1     215828    annotated_somatic_mutation #> 2     108963                 aligned_reads #> 3      99713       simple_somatic_mutation #> 4      58540           copy_number_segment #> 5      56984          structural_variation #> 6      45801          copy_number_estimate #> 7      35664               gene_expression #> 8      32813   aggregated_somatic_mutation #> 9      32268              mirna_expression #> 10     30075                   slide_image #> 11     27694      masked_methylation_array #> 12     25870        biospecimen_supplement #> 13     14810       masked_somatic_mutation #> 14     13847        methylation_beta_value #> 15     13002           clinical_supplement #> 16      7906            protein_expression #> 17        54 secondary_expression_analysis"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Return valid values for ","title":"Return valid values for ","text":"GDC allows shorthand specifying groups fields returned metadata queries. can specified select method call easily supply groups fields.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return valid values for ","text":"","code":"available_expand(entity)  # S3 method for character available_expand(entity)  # S3 method for GDCQuery available_expand(entity)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return valid values for ","text":"entity Either GDCQuery object character(1) specifying GDC entity ('cases', 'files', 'annotations', 'projects')","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return valid values for ","text":"character vector","code":""},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return valid values for ","text":"","code":"head(available_expand('files')) #> [1] \"analysis\"                                     #> [2] \"analysis.input_files\"                         #> [3] \"analysis.metadata\"                            #> [4] \"analysis.metadata.read_groups\"                #> [5] \"analysis.metadata.read_groups.read_group_qcs\" #> [6] \"annotations\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Generic to return all GDC fields — available_fields","title":"S3 Generic to return all GDC fields — available_fields","text":"S3 Generic return GDC fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Generic to return all GDC fields — available_fields","text":"","code":"available_fields(x)  # S3 method for GDCQuery available_fields(x)  # S3 method for character available_fields(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Generic to return all GDC fields — available_fields","text":"x character(1) string ('cases','files','projects', 'annotations') subclass GDCQuery.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Generic to return all GDC fields — available_fields","text":"character vector default fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_fields.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"S3 Generic to return all GDC fields — available_fields","text":"GDCQuery: GDCQuery method character: character method","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Generic to return all GDC fields — available_fields","text":"","code":"available_fields('projects') #>  [1] \"dbgap_accession_number\"                                #>  [2] \"disease_type\"                                          #>  [3] \"intended_release_date\"                                 #>  [4] \"name\"                                                  #>  [5] \"primary_site\"                                          #>  [6] \"program.dbgap_accession_number\"                        #>  [7] \"program.name\"                                          #>  [8] \"program.program_id\"                                    #>  [9] \"project_autocomplete\"                                  #> [10] \"project_id\"                                            #> [11] \"releasable\"                                            #> [12] \"released\"                                              #> [13] \"state\"                                                 #> [14] \"summary.case_count\"                                    #> [15] \"summary.data_categories.case_count\"                    #> [16] \"summary.data_categories.data_category\"                 #> [17] \"summary.data_categories.file_count\"                    #> [18] \"summary.experimental_strategies.case_count\"            #> [19] \"summary.experimental_strategies.experimental_strategy\" #> [20] \"summary.experimental_strategies.file_count\"            #> [21] \"summary.file_count\"                                    #> [22] \"summary.file_size\"                                     projQuery = query('projects') available_fields(projQuery) #>  [1] \"dbgap_accession_number\"                                #>  [2] \"disease_type\"                                          #>  [3] \"intended_release_date\"                                 #>  [4] \"name\"                                                  #>  [5] \"primary_site\"                                          #>  [6] \"program.dbgap_accession_number\"                        #>  [7] \"program.name\"                                          #>  [8] \"program.program_id\"                                    #>  [9] \"project_autocomplete\"                                  #> [10] \"project_id\"                                            #> [11] \"releasable\"                                            #> [12] \"released\"                                              #> [13] \"state\"                                                 #> [14] \"summary.case_count\"                                    #> [15] \"summary.data_categories.case_count\"                    #> [16] \"summary.data_categories.data_category\"                 #> [17] \"summary.data_categories.file_count\"                    #> [18] \"summary.experimental_strategies.case_count\"            #> [19] \"summary.experimental_strategies.experimental_strategy\" #> [20] \"summary.experimental_strategies.file_count\"            #> [21] \"summary.file_count\"                                    #> [22] \"summary.file_size\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Find common values for a GDC field — available_values","title":"Find common values for a GDC field — available_values","text":"Find common values GDC field","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find common values for a GDC field — available_values","text":"","code":"available_values(entity, field, legacy = FALSE)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find common values for a GDC field — available_values","text":"entity character(1), GDC entity (\"cases\", \"files\", \"annotations\", \"projects\") field character(1), field present entity record legacy logical(1), use legacy endpoint .","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find common values for a GDC field — available_values","text":"character vector top 100 (fewer) frequent     values given field","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/available_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find common values for a GDC field — available_values","text":"","code":"available_values('files','cases.project.project_id')[1:5] #> [1] \"FM-AD\"     \"TCGA-BRCA\" \"CPTAC-3\"   \"TCGA-LUAD\" \"GENIE-MSK\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoints and Parameters — endpoints","title":"Endpoints and Parameters — endpoints","text":"endpoints() returns available endpoints.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoints and Parameters — endpoints","text":"","code":"endpoints()  parameters()"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoints and Parameters — endpoints","text":"endpoints() returns character vector possible     endpoints. parameters() returns list possible parameters     default values.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoints and Parameters — endpoints","text":"","code":"endpoints() #> available endpoints: #>     status, projects, cases, files, annotations, data, manifest, #>     slicing parameters() #> available parameters: #>     format: JSON #>     pretty: FALSE #>     fields: NULL #>     size: 10 #>     from: 0 #>     sort: NULL #>     filters: NULL #>     facets: NULL"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/count.html","id":null,"dir":"Reference","previous_headings":"","what":"provide count of records in a GDCQuery — count","title":"provide count of records in a GDCQuery — count","text":"provide count records GDCQuery","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"provide count of records in a GDCQuery — count","text":"","code":"count(x, ...)  # S3 method for GDCQuery count(x, ...)  # S3 method for GDCResponse count(x, ...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"provide count of records in a GDCQuery — count","text":"x GDCQuery object ... passed httr (good passing config info, etc.)","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"provide count of records in a GDCQuery — count","text":"integer(1) representing count records  returned current query","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/count.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"provide count of records in a GDCQuery — count","text":"GDCQuery: GDCResponse:","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"provide count of records in a GDCQuery — count","text":"","code":"# total number of projects projects() %>% count() #> [1] 70  # total number of cases cases() %>% count() #> [1] 85416"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/default_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Generic to return default GDC fields — default_fields","title":"S3 Generic to return default GDC fields — default_fields","text":"S3 Generic return default GDC fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/default_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Generic to return default GDC fields — default_fields","text":"","code":"default_fields(x)  # S3 method for character default_fields(x)  # S3 method for GDCQuery default_fields(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/default_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Generic to return default GDC fields — default_fields","text":"x character string ('cases','files','projects', 'annotations') subclass GDCQuery.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/default_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Generic to return default GDC fields — default_fields","text":"character vector default fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/default_fields.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"S3 Generic to return default GDC fields — default_fields","text":"character: character method GDCQuery: GDCQuery method","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/default_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Generic to return default GDC fields — default_fields","text":"","code":"default_fields('projects') #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                  projQuery = query('projects') default_fields(projQuery) #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/entity_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the entity name from a GDCQuery object — entity_name","title":"Get the entity name from a GDCQuery object — entity_name","text":"\"entity\" simply one four medata endpoints. cases projects files annotations GDCQuery objects entity name. S3 method simply utility accessor names.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/entity_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the entity name from a GDCQuery object — entity_name","text":"","code":"entity_name(x)  # S3 method for GDCQuery entity_name(x)  # S3 method for GDCResults entity_name(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/entity_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the entity name from a GDCQuery object — entity_name","text":"x GDCQuery object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/entity_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the entity name from a GDCQuery object — entity_name","text":"character(1) name associated entity; one \"cases\", \"files\", \"projects\", \"annotations\".","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/entity_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the entity name from a GDCQuery object — entity_name","text":"","code":"qcases = cases() qprojects = projects()  entity_name(qcases) #> [1] \"cases\" entity_name(qprojects) #> [1] \"projects\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the expand parameter — expand","title":"Set the expand parameter — expand","text":"S3 generic set GDCQuery expand parameter","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the expand parameter — expand","text":"","code":"expand(x, expand)  # S3 method for GDCQuery expand(x, expand)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the expand parameter — expand","text":"x objects set fields expand character vector specifying fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the expand parameter — expand","text":"GDCQuery object, expandmember altered.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/expand.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Set the expand parameter — expand","text":"GDCQuery: set expand fields GDCQuery object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the expand parameter — expand","text":"","code":"gProj = projects() gProj$fields #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                  head(available_fields(gProj)) #> [1] \"dbgap_accession_number\"         \"disease_type\"                   #> [3] \"intended_release_date\"          \"name\"                           #> [5] \"primary_site\"                   \"program.dbgap_accession_number\" default_fields(gProj) #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                   gProj %>%   select(default_fields(gProj)[1:2]) %>%   response() %>%   str(max_level=2) #> List of 4 #>  $ results     :'data.frame':\t10 obs. of  4 variables: #>   ..$ id                    : chr [1:10] \"HCMI-CMDC\" \"GENIE-GRCC\" \"GENIE-DFCI\" \"GENIE-NKI\" ... #>   ..$ dbgap_accession_number: chr [1:10] \"phs001486\" NA NA NA ... #>   ..$ project_id            : chr [1:10] \"HCMI-CMDC\" \"GENIE-GRCC\" \"GENIE-DFCI\" \"GENIE-NKI\" ... #>   ..$ disease_type          :List of 10 #>   .. ..$ HCMI-CMDC : chr [1:11] \"Epithelial Neoplasms, NOS\" \"Complex Mixed and Stromal Neoplasms\" \"Gliomas\" \"Miscellaneous Bone Tumors\" ... #>   .. ..$ GENIE-GRCC: chr [1:32] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" ... #>   .. ..$ GENIE-DFCI: chr [1:52] \"Osseous and Chondromatous Neoplasms\" \"Other Leukemias\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... #>   .. ..$ GENIE-NKI : chr [1:23] \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" \"Transitional Cell Papillomas and Carcinomas\" ... #>   .. ..$ GENIE-VICC: chr [1:43] \"Neoplasms, NOS\" \"Adnexal and Skin Appendage Neoplasms\" \"Squamous Cell Neoplasms\" \"Gliomas\" ... #>   .. ..$ GENIE-UHN : chr [1:39] \"Other Leukemias\" \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... #>   .. ..$ GENIE-MDA : chr [1:34] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" ... #>   .. ..$ GENIE-MSK : chr [1:49] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" \"Fibromatous Neoplasms\" ... #>   .. ..$ GENIE-JHU : chr [1:33] \"Osseous and Chondromatous Neoplasms\" \"Other Leukemias\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... #>   .. ..$ FM-AD     : chr [1:23] \"Gliomas\" \"Acinar Cell Neoplasms\" \"Specialized Gonadal Neoplasms\" \"Miscellaneous Tumors\" ... #>  $ query       :List of 5 #>   ..$ fields : chr [1:3] \"project_id\" \"dbgap_accession_number\" \"disease_type\" #>   ..$ filters: NULL #>   ..$ facets : NULL #>   ..$ legacy : logi FALSE #>   ..$ expand : NULL #>   ..- attr(*, \"class\")= chr [1:3] \"gdc_projects\" \"GDCQuery\" \"list\" #>  $ pages       :List of 7 #>   ..$ count: int 10 #>   ..$ total: int 70 #>   ..$ size : int 10 #>   ..$ from : int 0 #>   ..$ sort : chr \"\" #>   ..$ page : int 1 #>   ..$ pages: int 7 #>  $ aggregations: list() #>  - attr(*, \"class\")= chr [1:3] \"GDCprojectsResponse\" \"GDCResponse\" \"list\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/faceting.html","id":null,"dir":"Reference","previous_headings":"","what":"Set facets for a GDCQuery — facet","title":"Set facets for a GDCQuery — facet","text":"Set facets GDCQuery Get facets GDCQuery","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/faceting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set facets for a GDCQuery — facet","text":"","code":"facet(x, facets)  get_facets(x)  # S3 method for GDCQuery get_facets(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/faceting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set facets for a GDCQuery — facet","text":"x GDCQuery object facets character vector fields used forming aggregations (facets). Default set facets default fields. See default_fields details","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/faceting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set facets for a GDCQuery — facet","text":"returns GDCQuery object, facets field updated.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/faceting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set facets for a GDCQuery — facet","text":"","code":"# create a new GDCQuery against the projects endpoint gProj = projects()  # default facets are NULL get_facets(gProj) #> NULL  # set facets and save result gProjFacet = facet(gProj)  # check facets get_facets(gProjFacet) #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                   # and get a response, noting that # the aggregations list member contains # tibbles for each facet str(response(gProjFacet,size=2),max.level=2) #> List of 4 #>  $ results     :'data.frame':\t2 obs. of  9 variables: #>   ..$ id                    : chr [1:2] \"HCMI-CMDC\" \"GENIE-GRCC\" #>   ..$ primary_site          :List of 2 #>   ..$ dbgap_accession_number: chr [1:2] \"phs001486\" NA #>   ..$ project_id            : chr [1:2] \"HCMI-CMDC\" \"GENIE-GRCC\" #>   ..$ disease_type          :List of 2 #>   ..$ name                  : chr [1:2] \"NCI Cancer Model Development for the Human Cancer Model Initiative\" \"AACR Project GENIE - Contributed by Institut Gustave Roussy\" #>   ..$ releasable            : logi [1:2] TRUE TRUE #>   ..$ state                 : chr [1:2] \"open\" \"open\" #>   ..$ released              : logi [1:2] TRUE TRUE #>  $ query       :List of 5 #>   ..$ fields : chr [1:10] \"dbgap_accession_number\" \"disease_type\" \"intended_release_date\" \"name\" ... #>   ..$ filters: NULL #>   ..$ facets : chr [1:10] \"dbgap_accession_number\" \"disease_type\" \"intended_release_date\" \"name\" ... #>   ..$ legacy : logi FALSE #>   ..$ expand : NULL #>   ..- attr(*, \"class\")= chr [1:3] \"gdc_projects\" \"GDCQuery\" \"list\" #>  $ pages       :List of 7 #>   ..$ count: int 2 #>   ..$ total: int 70 #>   ..$ size : int 2 #>   ..$ from : int 0 #>   ..$ sort : chr \"\" #>   ..$ page : int 1 #>   ..$ pages: int 35 #>  $ aggregations:List of 10 #>   ..$ dbgap_accession_number:'data.frame':\t26 obs. of  2 variables: #>   ..$ releasable            :'data.frame':\t2 obs. of  2 variables: #>   ..$ released              :'data.frame':\t1 obs. of  2 variables: #>   ..$ project_id            :'data.frame':\t70 obs. of  2 variables: #>   ..$ state                 :'data.frame':\t2 obs. of  2 variables: #>   ..$ primary_site          :'data.frame':\t68 obs. of  2 variables: #>   ..$ project_autocomplete  :'data.frame':\t200 obs. of  2 variables: #>   ..$ name                  :'data.frame':\t69 obs. of  2 variables: #>   ..$ disease_type          :'data.frame':\t59 obs. of  2 variables: #>   ..$ intended_release_date :'data.frame':\t1 obs. of  2 variables: #>  - attr(*, \"class\")= chr [1:3] \"GDCprojectsResponse\" \"GDCResponse\" \"list\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/field_description.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Generic that returns the field description text, if available — field_description","title":"S3 Generic that returns the field description text, if available — field_description","text":"S3 Generic returns field description text, available","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/field_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Generic that returns the field description text, if available — field_description","text":"","code":"field_description(entity, field)  # S3 method for GDCQuery field_description(entity, field)  # S3 method for character field_description(entity, field)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/field_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Generic that returns the field description text, if available — field_description","text":"entity character(1) string ('cases','files','projects', 'annotations', etc.) subclass GDCQuery. field character(1), name field used look description.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/field_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 Generic that returns the field description text, if available — field_description","text":"character(1) descriptive text character(0) description available.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/field_description.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"S3 Generic that returns the field description text, if available — field_description","text":"GDCQuery: GDCQuery method character: character method","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/field_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Generic that returns the field description text, if available — field_description","text":"","code":"field_description('cases', 'annotations.category') #> [1] \"Top level characterization of the annotation.\" casesQuery = query('cases') field_description(casesQuery, 'annotations.category') #> [1] \"Top level characterization of the annotation.\" field_description(cases(), 'annotations.category') #> [1] \"Top level characterization of the annotation.\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/filtering.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulating GDCQuery filters — filtering","title":"Manipulating GDCQuery filters — filtering","text":"Manipulating GDCQuery filters filter simply safe accessor filter element GDCQuery objects. get_filter simply safe accessor filter element GDCQuery objects.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/filtering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulating GDCQuery filters — filtering","text":"","code":"filter(x, expr)  # S3 method for GDCQuery filter(x, expr)  get_filter(x)  # S3 method for GDCQuery get_filter(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/filtering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulating GDCQuery filters — filtering","text":"x object set filter list member expr filter expression form right hand side formula, bare names (without quotes) allowed available fields associated GDCQuery object, x","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/filtering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulating GDCQuery filters — filtering","text":"GDCQuery object filter field replaced specified filter expression","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/filtering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulating GDCQuery filters — filtering","text":"","code":"# make a GDCQuery object to start # # Projects # pQuery = projects()  # check for the default fields # so that we can use one of them to build a filter default_fields(pQuery) #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                  pQuery = filter(pQuery,~ project_id == 'TCGA-LUAC') get_filter(pQuery) #> $op #> [x] \"=\" #>  #> $content #> $content$field #> [1] \"project_id\" #>  #> $content$value #> [1] \"TCGA-LUAC\" #>  #>   # # Files # fQuery = files() default_fields(fQuery) #>  [1] \"access\"                         \"acl\"                            #>  [3] \"average_base_quality\"           \"average_insert_size\"            #>  [5] \"average_read_length\"            \"channel\"                        #>  [7] \"chip_id\"                        \"chip_position\"                  #>  [9] \"contamination\"                  \"contamination_error\"            #> [11] \"created_datetime\"               \"data_category\"                  #> [13] \"data_format\"                    \"data_type\"                      #> [15] \"error_type\"                     \"experimental_strategy\"          #> [17] \"file_autocomplete\"              \"file_id\"                        #> [19] \"file_name\"                      \"file_size\"                      #> [21] \"imaging_date\"                   \"magnification\"                  #> [23] \"md5sum\"                         \"mean_coverage\"                  #> [25] \"msi_score\"                      \"msi_status\"                     #> [27] \"pairs_on_diff_chr\"              \"plate_name\"                     #> [29] \"plate_well\"                     \"platform\"                       #> [31] \"proc_internal\"                  \"proportion_base_mismatch\"       #> [33] \"proportion_coverage_10X\"        \"proportion_coverage_10x\"        #> [35] \"proportion_coverage_30X\"        \"proportion_coverage_30x\"        #> [37] \"proportion_reads_duplicated\"    \"proportion_reads_mapped\"        #> [39] \"proportion_targets_no_coverage\" \"read_pair_number\"               #> [41] \"revision\"                       \"stain_type\"                     #> [43] \"state\"                          \"state_comment\"                  #> [45] \"submitter_id\"                   \"tags\"                           #> [47] \"total_reads\"                    \"tumor_ploidy\"                   #> [49] \"tumor_purity\"                   \"type\"                           #> [51] \"updated_datetime\"                fQuery = filter(fQuery,~ data_format == 'VCF') # OR # with recent GenomicDataCommons versions: #   no \"~\" needed fQuery = filter(fQuery, data_format == 'VCF')  get_filter(fQuery) #> $op #> [1] \"and\" #>  #> $content #> $content[[1]] #> $content[[1]]$op #> [x] \"=\" #>  #> $content[[1]]$content #> $content[[1]]$content$field #> [1] \"data_format\" #>  #> $content[[1]]$content$value #> [1] \"VCF\" #>  #>  #>  #> $content[[2]] #> $content[[2]]$op #> [x] \"=\" #>  #> $content[[2]]$content #> $content[[2]]$content$field #> [1] \"data_format\" #>  #> $content[[2]]$content$value #> [1] \"VCF\" #>  #>  #>  #>   fQuery = filter(fQuery,~ data_format == 'VCF'                 & experimental_strategy == 'WXS'                 & type == 'simple_somatic_mutation')  files() %>% filter(~ data_format == 'VCF'                    & experimental_strategy=='WXS'                    & type == 'simple_somatic_mutation') %>% count() #> [1] 77373                                         files() %>% filter( data_format == 'VCF'                    & experimental_strategy=='WXS'                    & type == 'simple_somatic_mutation') %>% count() #> [1] 77373  # Filters may be chained for the  # equivalent query #  # When chained, filters are combined with logical AND  files() %>%   filter(~ data_format == 'VCF') %>%   filter(~ experimental_strategy == 'WXS') %>%   filter(~ type == 'simple_somatic_mutation') %>%   count() #> [1] 77373  # OR  files() %>%   filter( data_format == 'VCF') %>%   filter( experimental_strategy == 'WXS') %>%   filter( type == 'simple_somatic_mutation') %>%   count() #> [1] 77373  # Use str() to get a cleaner picture str(get_filter(fQuery)) #> List of 2 #>  $ op     : chr \"and\" #>  $ content:List of 2 #>   ..$ :List of 2 #>   .. ..$ op     : chr \"and\" #>   .. ..$ content:List of 2 #>   .. .. ..$ :List of 2 #>   .. .. .. ..$ op     : 'scalar' chr \"=\" #>   .. .. .. ..$ content:List of 2 #>   .. .. .. .. ..$ field: chr \"data_format\" #>   .. .. .. .. ..$ value: chr \"VCF\" #>   .. .. ..$ :List of 2 #>   .. .. .. ..$ op     : 'scalar' chr \"=\" #>   .. .. .. ..$ content:List of 2 #>   .. .. .. .. ..$ field: chr \"data_format\" #>   .. .. .. .. ..$ value: chr \"VCF\" #>   ..$ :List of 2 #>   .. ..$ op     : 'scalar' chr \"and\" #>   .. ..$ content:List of 2 #>   .. .. ..$ :List of 2 #>   .. .. .. ..$ op     : 'scalar' chr \"and\" #>   .. .. .. ..$ content:List of 2 #>   .. .. .. .. ..$ :List of 2 #>   .. .. .. .. .. ..$ op     : 'scalar' chr \"=\" #>   .. .. .. .. .. ..$ content:List of 2 #>   .. .. .. .. .. .. ..$ field: chr \"data_format\" #>   .. .. .. .. .. .. ..$ value: chr \"VCF\" #>   .. .. .. .. ..$ :List of 2 #>   .. .. .. .. .. ..$ op     : 'scalar' chr \"=\" #>   .. .. .. .. .. ..$ content:List of 2 #>   .. .. .. .. .. .. ..$ field: chr \"experimental_strategy\" #>   .. .. .. .. .. .. ..$ value: chr \"WXS\" #>   .. .. ..$ :List of 2 #>   .. .. .. ..$ op     : 'scalar' chr \"=\" #>   .. .. .. ..$ content:List of 2 #>   .. .. .. .. ..$ field: chr \"type\" #>   .. .. .. .. ..$ value: chr \"simple_somatic_mutation\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with gdc cache directory — gdc_cache","title":"Work with gdc cache directory — gdc_cache","text":"GenomicDataCommons package cache downloaded files minimize network allow offline work. functions used create cache directory one exist, set global option, query option. cache directory default user \"cache\" directory according specifications app_dir. However, user may want set another direcotory higher performance storage.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with gdc cache directory — gdc_cache","text":"","code":"gdc_cache()  gdc_set_cache(   directory = rappdirs::app_dir(appname = \"GenomicDataCommons\")$cache(),   verbose = TRUE,   create_without_asking = !interactive() )"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with gdc cache directory — gdc_cache","text":"directory character(1) directory path, created recursively present. verbose logical(1) whether message location cache directory creation. create_without_asking logical(1) specifying whether allow function create cache directory without asking user first. interactive session, cache directory exist, user prompted creation.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with gdc cache directory — gdc_cache","text":"character(1) directory path serves base directory GenomicDataCommons downloads. created directory (invisibly)","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with gdc cache directory — gdc_cache","text":"cache structure currently just directory file     represented path constructed :     CACHEDIR/UUID/FILENAME. cached files can manipulated     using standard file system commands (removing, finding,     etc.). sense, cache sytem minimalist design.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Work with gdc cache directory — gdc_cache","text":"gdc_set_cache: (Re)set GenomicDataCommons cache directory","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with gdc cache directory — gdc_cache","text":"","code":"gdc_cache() #> [1] \"~/.cache/GenomicDataCommons\" if (FALSE) { gdc_set_cache(getwd()) }"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_client.html","id":null,"dir":"Reference","previous_headings":"","what":"return gdc-client executable path — gdc_client","title":"return gdc-client executable path — gdc_client","text":"function convenience function  find return path GDC Data Transfer Tool executable assumed named 'gdc-client'.  assumption appropriate version GDC Data Transfer Tool separate download available https://gdc.cancer.gov/access-data/gdc-data-transfer-tool backup https://github.com/NCI-GDC/gdc-client.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return gdc-client executable path — gdc_client","text":"","code":"gdc_client()"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return gdc-client executable path — gdc_client","text":"character(1) path gdc-client executable.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_client.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"return gdc-client executable path — gdc_client","text":"path checked following order: R option(\"gdc_client\") environment variable GDC_CLIENT search PATH current working directory","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return gdc-client executable path — gdc_client","text":"","code":"# this cannot run without first # downloading the GDC Data Transfer Tool gdc_client = try(gdc_client(),silent=TRUE)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_clinical.html","id":null,"dir":"Reference","previous_headings":"","what":"Get clinical information from GDC — gdc_clinical","title":"Get clinical information from GDC — gdc_clinical","text":"NCI GDC complex data model allows various studies supply numerous clinical demographic data elements. However, across projects enter GDC, similarities. function returns four data.frames associated case_ids GDC.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_clinical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get clinical information from GDC — gdc_clinical","text":"","code":"gdc_clinical(case_ids, include_list_cols = FALSE)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_clinical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get clinical information from GDC — gdc_clinical","text":"case_ids character() vector case_ids, typically \"cases\" query. include_list_cols logical(1), whether include list columns \"main\" data.frame. list columns values aliquots, samples, etc. may useful situations, generally useful clinical annotations.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_clinical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get clinical information from GDC — gdc_clinical","text":"list four data.frames: main, representing basic case identification metadata     (update date, etc.) diagnoses esposures demographic","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_clinical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get clinical information from GDC — gdc_clinical","text":"Note data.frames can, general, different numbers rows (even rows ). one wishes combine produce single data.frame, using approach left joining \"main\" data.frame yield useful combined data.frame. directly given potential 1:many relationships. user determine best approach given dataset.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_clinical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get clinical information from GDC — gdc_clinical","text":"","code":"case_ids = cases() %>% results(size=10) %>% ids() clinical_data = gdc_clinical(case_ids)  # overview of clinical results class(clinical_data) #> [1] \"GDCClinicalList\" \"list\"            names(clinical_data) #> [1] \"demographic\" \"diagnoses\"   \"exposures\"   \"main\"        sapply(clinical_data, class) #>      demographic  diagnoses    exposures    main         #> [1,] \"tbl_df\"     \"tbl_df\"     \"tbl_df\"     \"tbl_df\"     #> [2,] \"tbl\"        \"tbl\"        \"tbl\"        \"tbl\"        #> [3,] \"data.frame\" \"data.frame\" \"data.frame\" \"data.frame\" sapply(clinical_data, nrow) #> demographic   diagnoses   exposures        main  #>          10          14          10          10   # available data head(clinical_data$main) #> # A tibble: 6 × 13 #>   id         lost_to_followup days_to_lost_to… created_datetime updated_datetime #>   <chr>      <chr>            <lgl>            <chr>            <chr>            #> 1 4829dd8c-… NA               NA               2020-07-31T09:2… 2021-07-12T12:2… #> 2 d420e653-… NA               NA               2019-10-14T10:4… 2021-03-03T15:1… #> 3 bfe15f44-… NA               NA               2019-08-14T15:1… 2020-10-20T19:2… #> 4 8b3b1f24-… NA               NA               2018-10-02T15:5… 2019-09-20T15:1… #> 5 fa30fc7f-… NA               NA               2020-05-18T13:2… 2021-07-12T12:2… #> 6 47322ea3-… NA               NA               2019-10-14T10:4… 2021-07-12T12:2… #> # … with 8 more variables: case_id <chr>, state <chr>, disease_type <chr>, #> #   submitter_id <chr>, days_to_consent <lgl>, consent_type <lgl>, #> #   primary_site <chr>, index_date <chr> head(clinical_data$demographic) #> # A tibble: 6 × 22 #>   cause_of_death race  gender ethnicity   vital_status age_at_index submitter_id #>   <chr>          <chr> <chr>  <chr>       <chr>        <lgl>        <chr>        #> 1 Cancer Related white female Unknown     Dead         NA           HCM-BROD-00… #> 2 Cancer Related white female not hispan… Dead         NA           HCM-BROD-02… #> 3 NA             white male   not hispan… Alive        NA           HCM-CSHL-00… #> 4 NA             white female not hispan… Alive        NA           HCM-CSHL-00… #> 5 Cancer Related white male   Unknown     Dead         NA           HCM-BROD-00… #> 6 NA             white male   not hispan… Alive        NA           HCM-BROD-03… #> # … with 15 more variables: days_to_birth <int>, created_datetime <chr>, #> #   year_of_birth <int>, cause_of_death_source <lgl>, premature_at_birth <lgl>, #> #   weeks_gestation_at_birth <lgl>, demographic_id <chr>, #> #   updated_datetime <chr>, age_is_obfuscated <lgl>, #> #   occupation_duration_years <lgl>, days_to_death <int>, state <chr>, #> #   year_of_death <lgl>, country_of_residence_at_enrollment <lgl>, #> #   case_id <chr> head(clinical_data$diagnoses) #> # A tibble: 6 × 101 #>   case_id gleason_pattern… ajcc_pathologic… ann_arbor_clini… created_datetime    #>   <chr>   <lgl>            <chr>            <lgl>            <dttm>              #> 1 4829dd… NA               NA               NA               2020-07-31 14:25:24 #> 2 d420e6… NA               NA               NA               2020-02-27 19:00:21 #> 3 bfe15f… NA               Stage I          NA               2020-02-27 18:37:46 #> 4 8b3b1f… NA               Stage I          NA               2019-05-15 18:02:25 #> 5 fa30fc… NA               Stage IV         NA               2020-06-15 17:57:49 #> 6 fa30fc… NA               NA               NA               2020-06-15 17:57:49 #> # … with 96 more variables: tissue_or_organ_of_origin <chr>, #> #   age_at_diagnosis <int>, cog_liver_stage <lgl>, #> #   child_pugh_classification <lgl>, peritoneal_fluid_cytological_status <lgl>, #> #   metastasis_at_diagnosis_site <chr>, state <chr>, #> #   pregnant_at_diagnosis <lgl>, cog_rhabdomyosarcoma_risk_group <lgl>, #> #   primary_gleason_grade <lgl>, margins_involved_site <lgl>, morphology <chr>, #> #   medulloblastoma_molecular_classification <lgl>, … head(clinical_data$exposures) #> # A tibble: 6 × 33 #>   case_id    alcohol_days_pe… alcohol_drinks_… smokeless_tobac… created_datetime #>   <chr>                 <int>            <int> <lgl>            <chr>            #> 1 4829dd8c-…               NA               NA NA               2020-07-31T09:2… #> 2 d420e653-…               NA               NA NA               2020-02-27T13:0… #> 3 bfe15f44-…               NA               NA NA               2020-02-27T12:3… #> 4 8b3b1f24-…               NA               NA NA               2019-05-15T13:0… #> 5 fa30fc7f-…               NA                0 NA               2020-06-15T12:5… #> 6 47322ea3-…               NA               NA NA               2020-09-17T16:1… #> # … with 28 more variables: pack_years_smoked <lgl>, #> #   secondhand_smoke_as_child <lgl>, asbestos_exposure <chr>, #> #   cigarettes_per_day <lgl>, age_at_onset <lgl>, tobacco_smoking_status <chr>, #> #   updated_datetime <chr>, exposure_id <chr>, marijuana_use_per_week <lgl>, #> #   tobacco_smoking_onset_year <lgl>, #> #   respirable_crystalline_silica_exposure <lgl>, exposure_duration <lgl>, #> #   years_smoked <lgl>, state <chr>, type_of_smoke_exposure <lgl>, …"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_token.html","id":null,"dir":"Reference","previous_headings":"","what":"return a gdc token from file or environment — gdc_token","title":"return a gdc token from file or environment — gdc_token","text":"GDC requires auth token downloading data \"controlled access\". example,  BAM files human datasets, germline variant calls, SNP array raw data protected \"controlled access\". files, GDC access token required. See https://docs.gdc.cancer.gov/Data_Portal/Users_Guide/Authentication/#gdc-authentication-tokens. Note function simply returns string value.  possible keep GDC token variable R pass string directly appropriate parameter. function simply convenience function alternative  approaches get token environment variable file.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return a gdc token from file or environment — gdc_token","text":"","code":"gdc_token()"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return a gdc token from file or environment — gdc_token","text":"character(1) (invisibly, protect inadvertently printing) GDC token.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"return a gdc token from file or environment — gdc_token","text":"function resolve locations GDC token  following order: environment variable, GDC_TOKEN, expected  contain token downloaded GDC string using readLines read file named environment variable, GDC_TOKEN_FILE using readLines read file called .gdc_token user's home directory fail, function return error.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_token.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"return a gdc token from file or environment — gdc_token","text":"https://docs.gdc.cancer.gov/Data_Portal/Users_Guide/Authentication/#gdc-authentication-tokens","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdc_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return a gdc token from file or environment — gdc_token","text":"","code":"# This will not run before a GDC token # is in place.   token = try(gdc_token(),silent=TRUE)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdcdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GDC files — gdcdata","title":"Download GDC files — gdcdata","text":"Download one files GDC. Files downloaded using UUID renamed file name remote system. default, neither uuid file name remote system can exist.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdcdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GDC files — gdcdata","text":"","code":"gdcdata(   uuids,   use_cached = TRUE,   progress = interactive(),   token = NULL,   access_method = \"api\",   transfer_args = character(),   ... )"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdcdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GDC files — gdcdata","text":"uuids character() GDC file UUIDs. use_cached logical(1) default TRUE indicating , found cache, file downloaded . FALSE, supplied uuids re-downloaded. progress logical(1) default TRUE interactive sessions, FALSE otherwise indicating whether progress par produced file download. token (optional) character(1) security token allowing access restricted data. See https://gdc-docs.nci.nih.gov/API/Users_Guide/Authentication_and_Authorization/. access_method character(1), either 'api' 'client'. See details. transfer_args character(1), additional arguments pass gdc-client command line. See gdc_client transfer_help details. ... arguments passed files, particulary useful requesting legacy=TRUE","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdcdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GDC files — gdcdata","text":"named vector file uuids names paths value","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdcdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download GDC files — gdcdata","text":"function appropriate one several files; large downloads use manifest create manifest GDC Data Transfer Tool. access_method \"api\", GDC \"data\" endpoint     transfer mechanism used. alternative access_method, \"client\",     utilize gdc-client transfer tool, must     downloaded separately available. See     gdc_client details specifying location     gdc-client executable.","code":""},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/gdcdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GDC files — gdcdata","text":"","code":"# get some example file uuids uuids <- files() %>%     filter(~ access == 'open' & file_size < 100000) %>%     results(size = 3) %>%     ids()  # and get the data, placing it into the gdc_cache() directory gdcdata(uuids, use_cached=TRUE) #>                                                                                                              e4f53f7a-7bf4-4908-bbe7-4dee159e04b2  #>        \"~/.cache/GenomicDataCommons/e4f53f7a-7bf4-4908-bbe7-4dee159e04b2/a50a7ba0-c479-410f-a338-9ab179975875.wxs.aliquot_ensemble_masked.maf.gz\"  #>                                                                                                              77f11c00-5e1c-4258-a5be-fd367459fadc  #> \"~/.cache/GenomicDataCommons/77f11c00-5e1c-4258-a5be-fd367459fadc/TCGA-BRCA.c6e7c59d-708f-497e-b6e6-ed91ba294943.ascat2.allelic_specific.seg.txt\"  #>                                                                                                              78026596-7c57-403d-85a3-ca244cbb9117  #>                                   \"~/.cache/GenomicDataCommons/78026596-7c57-403d-85a3-ca244cbb9117/nationwidechildrens.org_ssf.TCGA-E9-A1NE.xml\"   # legacy data exon <- files(legacy = TRUE) %>%     filter( ~ cases.project.project_id == \"TCGA-COAD\" &         data_category == \"Gene expression\" &         data_type == \"Exon quantification\") %>%     results(size = 1) %>% ids()  gdcdata(exon, legacy = TRUE) #>                                                                                                               13f62ad4-b55d-4091-9cea-a4dce58f9943  #> \"~/.cache/GenomicDataCommons/13f62ad4-b55d-4091-9cea-a4dce58f9943/unc.edu.85eb9996-655c-44f8-abbf-fbc332cf75cf.1756113.bt.exon_quantification.txt\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/grep_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Find matching field names — grep_fields","title":"Find matching field names — grep_fields","text":"utility function allows quick text-based search available fields using grep","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/grep_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find matching field names — grep_fields","text":"","code":"grep_fields(entity, pattern, ..., value = TRUE)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/grep_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find matching field names — grep_fields","text":"entity one available gdc entities ('files','cases',...) gather available fields matching pattern regular expression used call grep ... passed grep value logical(1) whether return values opposed indices (passed along grep)","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/grep_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find matching field names — grep_fields","text":"character() vector field names matching pattern","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/grep_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find matching field names — grep_fields","text":"","code":"grep_fields('files','analysis') #>   [1] \"analysis.analysis_id\"                                                      #>   [2] \"analysis.analysis_type\"                                                    #>   [3] \"analysis.created_datetime\"                                                 #>   [4] \"analysis.input_files.access\"                                               #>   [5] \"analysis.input_files.average_base_quality\"                                 #>   [6] \"analysis.input_files.average_insert_size\"                                  #>   [7] \"analysis.input_files.average_read_length\"                                  #>   [8] \"analysis.input_files.channel\"                                              #>   [9] \"analysis.input_files.chip_id\"                                              #>  [10] \"analysis.input_files.chip_position\"                                        #>  [11] \"analysis.input_files.contamination\"                                        #>  [12] \"analysis.input_files.contamination_error\"                                  #>  [13] \"analysis.input_files.created_datetime\"                                     #>  [14] \"analysis.input_files.data_category\"                                        #>  [15] \"analysis.input_files.data_format\"                                          #>  [16] \"analysis.input_files.data_type\"                                            #>  [17] \"analysis.input_files.error_type\"                                           #>  [18] \"analysis.input_files.experimental_strategy\"                                #>  [19] \"analysis.input_files.file_id\"                                              #>  [20] \"analysis.input_files.file_name\"                                            #>  [21] \"analysis.input_files.file_size\"                                            #>  [22] \"analysis.input_files.imaging_date\"                                         #>  [23] \"analysis.input_files.magnification\"                                        #>  [24] \"analysis.input_files.md5sum\"                                               #>  [25] \"analysis.input_files.mean_coverage\"                                        #>  [26] \"analysis.input_files.msi_score\"                                            #>  [27] \"analysis.input_files.msi_status\"                                           #>  [28] \"analysis.input_files.pairs_on_diff_chr\"                                    #>  [29] \"analysis.input_files.plate_name\"                                           #>  [30] \"analysis.input_files.plate_well\"                                           #>  [31] \"analysis.input_files.platform\"                                             #>  [32] \"analysis.input_files.proc_internal\"                                        #>  [33] \"analysis.input_files.proportion_base_mismatch\"                             #>  [34] \"analysis.input_files.proportion_coverage_10X\"                              #>  [35] \"analysis.input_files.proportion_coverage_10x\"                              #>  [36] \"analysis.input_files.proportion_coverage_30X\"                              #>  [37] \"analysis.input_files.proportion_coverage_30x\"                              #>  [38] \"analysis.input_files.proportion_reads_duplicated\"                          #>  [39] \"analysis.input_files.proportion_reads_mapped\"                              #>  [40] \"analysis.input_files.proportion_targets_no_coverage\"                       #>  [41] \"analysis.input_files.read_pair_number\"                                     #>  [42] \"analysis.input_files.revision\"                                             #>  [43] \"analysis.input_files.stain_type\"                                           #>  [44] \"analysis.input_files.state\"                                                #>  [45] \"analysis.input_files.state_comment\"                                        #>  [46] \"analysis.input_files.submitter_id\"                                         #>  [47] \"analysis.input_files.total_reads\"                                          #>  [48] \"analysis.input_files.tumor_ploidy\"                                         #>  [49] \"analysis.input_files.tumor_purity\"                                         #>  [50] \"analysis.input_files.updated_datetime\"                                     #>  [51] \"analysis.metadata.read_groups.RIN\"                                         #>  [52] \"analysis.metadata.read_groups.adapter_name\"                                #>  [53] \"analysis.metadata.read_groups.adapter_sequence\"                            #>  [54] \"analysis.metadata.read_groups.base_caller_name\"                            #>  [55] \"analysis.metadata.read_groups.base_caller_version\"                         #>  [56] \"analysis.metadata.read_groups.chipseq_antibody\"                            #>  [57] \"analysis.metadata.read_groups.chipseq_target\"                              #>  [58] \"analysis.metadata.read_groups.created_datetime\"                            #>  [59] \"analysis.metadata.read_groups.days_to_sequencing\"                          #>  [60] \"analysis.metadata.read_groups.experiment_name\"                             #>  [61] \"analysis.metadata.read_groups.flow_cell_barcode\"                           #>  [62] \"analysis.metadata.read_groups.fragment_maximum_length\"                     #>  [63] \"analysis.metadata.read_groups.fragment_mean_length\"                        #>  [64] \"analysis.metadata.read_groups.fragment_minimum_length\"                     #>  [65] \"analysis.metadata.read_groups.fragment_standard_deviation_length\"          #>  [66] \"analysis.metadata.read_groups.fragmentation_enzyme\"                        #>  [67] \"analysis.metadata.read_groups.includes_spike_ins\"                          #>  [68] \"analysis.metadata.read_groups.instrument_model\"                            #>  [69] \"analysis.metadata.read_groups.is_paired_end\"                               #>  [70] \"analysis.metadata.read_groups.lane_number\"                                 #>  [71] \"analysis.metadata.read_groups.library_name\"                                #>  [72] \"analysis.metadata.read_groups.library_preparation_kit_catalog_number\"      #>  [73] \"analysis.metadata.read_groups.library_preparation_kit_name\"                #>  [74] \"analysis.metadata.read_groups.library_preparation_kit_vendor\"              #>  [75] \"analysis.metadata.read_groups.library_preparation_kit_version\"             #>  [76] \"analysis.metadata.read_groups.library_selection\"                           #>  [77] \"analysis.metadata.read_groups.library_strand\"                              #>  [78] \"analysis.metadata.read_groups.library_strategy\"                            #>  [79] \"analysis.metadata.read_groups.multiplex_barcode\"                           #>  [80] \"analysis.metadata.read_groups.number_expect_cells\"                         #>  [81] \"analysis.metadata.read_groups.platform\"                                    #>  [82] \"analysis.metadata.read_groups.read_group_id\"                               #>  [83] \"analysis.metadata.read_groups.read_group_name\"                             #>  [84] \"analysis.metadata.read_groups.read_group_qcs.adapter_content\"              #>  [85] \"analysis.metadata.read_groups.read_group_qcs.basic_statistics\"             #>  [86] \"analysis.metadata.read_groups.read_group_qcs.created_datetime\"             #>  [87] \"analysis.metadata.read_groups.read_group_qcs.encoding\"                     #>  [88] \"analysis.metadata.read_groups.read_group_qcs.fastq_name\"                   #>  [89] \"analysis.metadata.read_groups.read_group_qcs.kmer_content\"                 #>  [90] \"analysis.metadata.read_groups.read_group_qcs.overrepresented_sequences\"    #>  [91] \"analysis.metadata.read_groups.read_group_qcs.per_base_n_content\"           #>  [92] \"analysis.metadata.read_groups.read_group_qcs.per_base_sequence_content\"    #>  [93] \"analysis.metadata.read_groups.read_group_qcs.per_base_sequence_quality\"    #>  [94] \"analysis.metadata.read_groups.read_group_qcs.per_sequence_gc_content\"      #>  [95] \"analysis.metadata.read_groups.read_group_qcs.per_sequence_quality_score\"   #>  [96] \"analysis.metadata.read_groups.read_group_qcs.per_tile_sequence_quality\"    #>  [97] \"analysis.metadata.read_groups.read_group_qcs.percent_gc_content\"           #>  [98] \"analysis.metadata.read_groups.read_group_qcs.read_group_qc_id\"             #>  [99] \"analysis.metadata.read_groups.read_group_qcs.sequence_duplication_levels\"  #> [100] \"analysis.metadata.read_groups.read_group_qcs.sequence_length_distribution\" #> [101] \"analysis.metadata.read_groups.read_group_qcs.state\"                        #> [102] \"analysis.metadata.read_groups.read_group_qcs.submitter_id\"                 #> [103] \"analysis.metadata.read_groups.read_group_qcs.total_sequences\"              #> [104] \"analysis.metadata.read_groups.read_group_qcs.updated_datetime\"             #> [105] \"analysis.metadata.read_groups.read_group_qcs.workflow_end_datetime\"        #> [106] \"analysis.metadata.read_groups.read_group_qcs.workflow_link\"                #> [107] \"analysis.metadata.read_groups.read_group_qcs.workflow_start_datetime\"      #> [108] \"analysis.metadata.read_groups.read_group_qcs.workflow_type\"                #> [109] \"analysis.metadata.read_groups.read_group_qcs.workflow_version\"             #> [110] \"analysis.metadata.read_groups.read_length\"                                 #> [111] \"analysis.metadata.read_groups.rin\"                                         #> [112] \"analysis.metadata.read_groups.sequencing_center\"                           #> [113] \"analysis.metadata.read_groups.sequencing_date\"                             #> [114] \"analysis.metadata.read_groups.single_cell_library\"                         #> [115] \"analysis.metadata.read_groups.size_selection_range\"                        #> [116] \"analysis.metadata.read_groups.spike_ins_concentration\"                     #> [117] \"analysis.metadata.read_groups.spike_ins_fasta\"                             #> [118] \"analysis.metadata.read_groups.state\"                                       #> [119] \"analysis.metadata.read_groups.submitter_id\"                                #> [120] \"analysis.metadata.read_groups.target_capture_kit\"                          #> [121] \"analysis.metadata.read_groups.target_capture_kit_catalog_number\"           #> [122] \"analysis.metadata.read_groups.target_capture_kit_name\"                     #> [123] \"analysis.metadata.read_groups.target_capture_kit_target_region\"            #> [124] \"analysis.metadata.read_groups.target_capture_kit_vendor\"                   #> [125] \"analysis.metadata.read_groups.target_capture_kit_version\"                  #> [126] \"analysis.metadata.read_groups.to_trim_adapter_sequence\"                    #> [127] \"analysis.metadata.read_groups.updated_datetime\"                            #> [128] \"analysis.state\"                                                            #> [129] \"analysis.submitter_id\"                                                     #> [130] \"analysis.updated_datetime\"                                                 #> [131] \"analysis.workflow_end_datetime\"                                            #> [132] \"analysis.workflow_link\"                                                    #> [133] \"analysis.workflow_start_datetime\"                                          #> [134] \"analysis.workflow_type\"                                                    #> [135] \"analysis.workflow_version\"                                                 #> [136] \"cases.follow_ups.molecular_tests.molecular_analysis_method\"                #> [137] \"downstream_analyses.analysis_id\"                                           #> [138] \"downstream_analyses.analysis_type\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/id_field.html","id":null,"dir":"Reference","previous_headings":"","what":"get the name of the id field — id_field","title":"get the name of the id field — id_field","text":"many places GenomicDataCommons package, entity ids stored column vector specific name corresponds field name  GDC. format entity name (singular) \"_id\". generic simply returns name given object.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/id_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the name of the id field — id_field","text":"","code":"id_field(x)  # S3 method for GDCQuery id_field(x)  # S3 method for GDCResults id_field(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/id_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the name of the id field — id_field","text":"x object representing query results  entity GDC (\"cases\", \"files\", \"annotations\", \"projects\")","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/id_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get the name of the id field — id_field","text":"character(1) \"case_id\", \"file_id\", etc.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/id_field.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"get the name of the id field — id_field","text":"GDCQuery: GDCQuery method GDCResults: GDCResults method","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/id_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get the name of the id field — id_field","text":"","code":"id_field(cases()) #> [1] \"case_id\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the ids associated with a GDC query or response — ids","title":"Get the ids associated with a GDC query or response — ids","text":"GDC assigns ids (form uuids) objects database. ids can used relationships, searching website, unique ids.  ","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the ids associated with a GDC query or response — ids","text":"","code":"ids(x)  # S3 method for GDCManifest ids(x)  # S3 method for GDCQuery ids(x)  # S3 method for GDCResults ids(x)  # S3 method for GDCResponse ids(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the ids associated with a GDC query or response — ids","text":"x GDCQuery GDCResponse object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the ids associated with a GDC query or response — ids","text":"character vector entity ids","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the ids associated with a GDC query or response — ids","text":"","code":"# use with a GDC query, in this case for \"cases\" ids(cases() %>% filter(~ project.project_id == \"TCGA-CHOL\")) #>  [1] \"6e534dd3-81ac-4575-ab1e-02c21e10916d\" #>  [2] \"5fb3affa-3661-48e8-a1cc-b533c862e8c5\" #>  [3] \"47a9ef9b-04f0-4e8d-bfdb-0846ba30d08b\" #>  [4] \"5166d82f-7b22-4101-bea9-6056e5a74c48\" #>  [5] \"20ec1cd9-7bdb-4eb9-9d20-65795580f1f5\" #>  [6] \"d64d8a1b-b31f-4cbb-a586-5ec7f058f0de\" #>  [7] \"f47dbd99-920b-4b39-a1b0-6c152ad24884\" #>  [8] \"b10c64c2-7fd2-4210-b975-034affb14b57\" #>  [9] \"ae8d1ed6-2ddf-47b0-8099-bbc9230b499e\" #> [10] \"1932bc1e-2a15-4f74-978e-d49c366604a4\" #> [11] \"b4f7f9e4-5fc5-4461-8e0b-0b6c384863c6\" #> [12] \"15850852-5979-419d-ae38-76ffd0e9d7e8\" #> [13] \"41b97b11-acaa-4fbc-b3b0-0abc1bcac13b\" #> [14] \"7047dc12-e2ed-40b7-86fd-c5c53a2766fd\" #> [15] \"0775583e-c0a0-4f18-9ca2-8f89cedce3d6\" #> [16] \"e76cf9a0-061e-4a7d-ba28-5a40b8da54b8\" #> [17] \"32e9558c-946b-4288-91e1-504e47c308ac\" #> [18] \"4290b3b3-94f6-43e4-8309-430dd973ae2d\" #> [19] \"180a2b9c-9cac-4d96-86e8-cd6b3b9386b5\" #> [20] \"1947a152-6339-4f66-b9a4-0229580f0287\" #> [21] \"1d136284-bdf5-498e-9506-4893801a337c\" #> [22] \"20bf79af-3b0f-477d-b619-5597d42f5d5e\" #> [23] \"22bf93b3-c8dc-4669-862f-3e4ae478849b\" #> [24] \"2d6e20b2-82c7-4c12-92d0-93282b0a9031\" #> [25] \"37d60df9-2fa5-433b-9e54-dccb5ed5a638\" #> [26] \"3824cd6d-c85c-4b21-819a-932d1afef976\" #> [27] \"3c8ca064-a4a7-416f-a069-4324d4a72038\" #> [28] \"3f7e0cbf-e48c-410a-9138-be9b373fef73\" #> [29] \"48d17b17-348c-405a-ae92-f190372a3aac\" #> [30] \"57500d4c-4bb3-4f32-ae3a-a0b78f18c526\" #> [31] \"5cf3911a-f3ea-4c0e-851d-5bb57ca7190f\" #> [32] \"779ce92d-1abd-44fc-9021-eda4d7f08fff\" #> [33] \"7f08f522-08ff-4b30-aa5b-e69cf15041c9\" #> [34] \"859ed2d9-668d-440c-86ab-dcd0d9742973\" #> [35] \"8944fe2a-e32f-4898-a2c5-fb6751f602a4\" #> [36] \"91544f6b-90b6-45df-a501-3097fe0c74be\" #> [37] \"95b69517-4971-450e-9ed0-43bc8b2c0534\" #> [38] \"9d9109f5-5917-4126-8e34-8a7e4632e913\" #> [39] \"aaacf22c-2362-4613-b024-88fb7dd1cca1\" #> [40] \"adc9a685-5b4a-4c29-881a-da1895c47520\" #> [41] \"b16e9c3f-c7df-46c2-bee3-ecaebbab025f\" #> [42] \"bc15cec4-1f82-47fe-ae69-3853194fab7e\" #> [43] \"bec2cf62-44a2-42e5-8e10-440aad69ed77\" #> [44] \"c60eb7be-c85c-4338-a20b-51948d43bf2a\" #> [45] \"c8e57f03-ac69-49bb-954b-4c40fe371f75\" #> [46] \"cb40327b-f3ac-4f0a-bb17-7db2a281e354\" #> [47] \"ccb028ae-777c-4af6-b92e-40848f1cf774\" #> [48] \"dcc87c59-fd8c-4511-9983-96d5b9784cb0\" #> [49] \"f2d42e03-ca8d-4b57-ae39-0cc8f37b1b67\" #> [50] \"fe57b639-db7a-460f-adfe-552f1e034e46\" #> [51] \"ff4131c9-537c-46cc-b495-9af60d431f5e\" # also works for responses ids(response(files())) #>  [1] \"e4f53f7a-7bf4-4908-bbe7-4dee159e04b2\" #>  [2] \"ab641fde-b700-4880-b4cd-bcee86f8e598\" #>  [3] \"3f280617-d515-4429-966a-2e3909814cb7\" #>  [4] \"c60d1896-5ffb-42a8-968c-7a07886ecbba\" #>  [5] \"7501e1ae-bec5-4d80-b851-28a9434ca3f7\" #>  [6] \"17b48c49-460b-44cb-9235-96655bfb75dc\" #>  [7] \"77f11c00-5e1c-4258-a5be-fd367459fadc\" #>  [8] \"e22ee64c-63de-406c-a02d-bb3b6825ef0f\" #>  [9] \"44aed670-ea55-4638-98b8-31110a6c5f3a\" #> [10] \"3d71f455-4972-45b6-8289-f2083530fe2a\" # and results ids(results(cases())) #>  [1] \"4829dd8c-5445-41b3-ae37-bbcc333e8c9e\" #>  [2] \"d420e653-3fb2-432b-9e81-81232a80264d\" #>  [3] \"bfe15f44-e1dd-46ed-b429-908822d0a781\" #>  [4] \"8b3b1f24-419e-4043-82be-2bd41268bb0e\" #>  [5] \"fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8\" #>  [6] \"47322ea3-6bbe-442b-a656-c48469cc99c1\" #>  [7] \"149a8565-e0c5-4474-a693-d44f1b445c0c\" #>  [8] \"2c636721-d11e-463e-8f77-a23501dd3d60\" #>  [9] \"6380f4ca-f7ca-41ee-90ed-54403bed84f6\" #> [10] \"9f4d0076-c4a2-46d4-879f-896946338c09\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/legacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the legacy parameter — legacy","title":"Set the legacy parameter — legacy","text":"S3 generic set GDCQuery legacy parameter","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/legacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the legacy parameter — legacy","text":"","code":"legacy(x, legacy)  # S3 method for GDCQuery legacy(x, legacy)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/legacy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the legacy parameter — legacy","text":"x objects set fields legacy logical(1) Whether use GDC legacy archives","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/legacy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the legacy parameter — legacy","text":"GDCQuery object legacymember altered.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/legacy.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Set the legacy parameter — legacy","text":"GDCQuery: set legacy field GDCQuery object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/legacy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the legacy parameter — legacy","text":"","code":"qcases <- query(\"cases\")  legacy(qcases, legacy = FALSE) #> $fields #>  [1] \"aliquot_ids\"              \"analyte_ids\"              #>  [3] \"case_autocomplete\"        \"case_id\"                  #>  [5] \"consent_type\"             \"created_datetime\"         #>  [7] \"days_to_consent\"          \"days_to_lost_to_followup\" #>  [9] \"diagnosis_ids\"            \"disease_type\"             #> [11] \"index_date\"               \"lost_to_followup\"         #> [13] \"portion_ids\"              \"primary_site\"             #> [15] \"sample_ids\"               \"slide_ids\"                #> [17] \"state\"                    \"submitter_aliquot_ids\"    #> [19] \"submitter_analyte_ids\"    \"submitter_diagnosis_ids\"  #> [21] \"submitter_id\"             \"submitter_portion_ids\"    #> [23] \"submitter_sample_ids\"     \"submitter_slide_ids\"      #> [25] \"updated_datetime\"         #>  #> $filters #> NULL #>  #> $facets #> NULL #>  #> $legacy #> [1] FALSE #>  #> $expand #> NULL #>  #> attr(,\"class\") #> [1] \"gdc_cases\" \"GDCQuery\"  \"list\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/make_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NCI GDC filters for limiting GDC query results — make_filter","title":"Create NCI GDC filters for limiting GDC query results — make_filter","text":"Searching NCI GDC allows complex filtering based logical operations simple comparisons.  function facilitates writing filter expressions R-like syntax R code evaluation.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/make_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NCI GDC filters for limiting GDC query results — make_filter","text":"","code":"make_filter(expr, available_fields)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/make_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NCI GDC filters for limiting GDC query results — make_filter","text":"expr lazy-wrapped expression formula RHS equivalent available_fields character vector additional names injected filter evaluation environment","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/make_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NCI GDC filters for limiting GDC query results — make_filter","text":"list represents R version JSON ultimately used NCI GDC search query.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/make_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NCI GDC filters for limiting GDC query results — make_filter","text":"used available_fields, \"bare\" fields named available_fields character vector can used filter expression without quotes.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare GDC manifest file for bulk download — manifest","title":"Prepare GDC manifest file for bulk download — manifest","text":"manifest function/method creates manifest files downloaded using GDC Data Transfer Tool. methods creating manifest data frames GDCQuery objects contain file information (\"cases\" \"files\" queries).","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare GDC manifest file for bulk download — manifest","text":"","code":"manifest(x, from = 0, size = count(x), ...)  # S3 method for gdc_files manifest(x, from = 0, size = count(x), ...)  # S3 method for GDCfilesResponse manifest(x, from = 0, size = count(x), ...)  # S3 method for GDCcasesResponse manifest(x, from = 0, size = count(x), ...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare GDC manifest file for bulk download — manifest","text":"x GDCQuery object subclass \"gdc_files\" \"gdc_cases\". Record number start returning manifest. size total number records return.  Default  return usually desirable full set records. ... passed PUT.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare GDC manifest file for bulk download — manifest","text":"tibble, also type \"gdc_manifest\", five columns: id filename md5 size state","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/manifest.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Prepare GDC manifest file for bulk download — manifest","text":"gdc_files: GDCfilesResponse: GDCcasesResponse:","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare GDC manifest file for bulk download — manifest","text":"","code":"gFiles = files() shortManifest = gFiles %>% manifest(size=10) head(shortManifest,n=3) #> # A tibble: 3 × 5 #>   id                                   filename               md5     size state #>   <chr>                                <chr>                  <chr>  <dbl> <chr> #> 1 e4f53f7a-7bf4-4908-bbe7-4dee159e04b2 a50a7ba0-c479-410f-a3… 3382… 2.62e4 rele… #> 2 ab641fde-b700-4880-b4cd-bcee86f8e598 fe867259-9fa9-4ff7-b5… 60f7… 1.12e6 rele… #> 3 3f280617-d515-4429-966a-2e3909814cb7 b0d17488-7444-423f-9a… 8da7… 8.10e6 rele…"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Query GDC for available endpoint fields — mapping","title":"Query GDC for available endpoint fields — mapping","text":"Query GDC available endpoint fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query GDC for available endpoint fields — mapping","text":"","code":"mapping(endpoint)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query GDC for available endpoint fields — mapping","text":"endpoint character(1) corresponding endpoints users may specify additional alternative fields. Endpoints include “projects”, “cases”, “files”, “annotations”.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query GDC for available endpoint fields — mapping","text":"data frame describing field (field name), full (full     data model name), type (data type), four additional columns     describing \"set\" fields belong--“default”, “expand”, “multi”, “nested”.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query GDC for available endpoint fields — mapping","text":"","code":"map <- mapping(\"projects\") head(map) #>                            field #> 1         dbgap_accession_number #> 2                   disease_type #> 3          intended_release_date #> 4                           name #> 5                   primary_site #> 6 program.dbgap_accession_number #>                                            description doc_type #> 1                                                      projects #> 2                                                      projects #> 3                                                      projects #> 4                                                      projects #> 5                                                      projects #> 6 The dbgap accession number provided for the program. projects #>                                      full    type defaults #> 1         projects.dbgap_accession_number keyword     TRUE #> 2                   projects.disease_type keyword     TRUE #> 3          projects.intended_release_date keyword     TRUE #> 4                           projects.name keyword     TRUE #> 5                   projects.primary_site keyword     TRUE #> 6 projects.program.dbgap_accession_number keyword    FALSE # get only the \"default\" fields subset(map,defaults) #>                     field description doc_type                            full #> 1  dbgap_accession_number             projects projects.dbgap_accession_number #> 2            disease_type             projects           projects.disease_type #> 3   intended_release_date             projects  projects.intended_release_date #> 4                    name             projects                   projects.name #> 5            primary_site             projects           projects.primary_site #> 9    project_autocomplete             projects   projects.project_autocomplete #> 10             project_id             projects             projects.project_id #> 11             releasable             projects             projects.releasable #> 12               released             projects               projects.released #> 13                  state             projects                  projects.state #>       type defaults #> 1  keyword     TRUE #> 2  keyword     TRUE #> 3  keyword     TRUE #> 4  keyword     TRUE #> 5  keyword     TRUE #> 9       id     TRUE #> 10 keyword     TRUE #> 11 keyword     TRUE #> 12 keyword     TRUE #> 13 keyword     TRUE # And get just the text names of the \"default\" fields subset(map,defaults)$field #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a query of GDC metadata — query","title":"Start a query of GDC metadata — query","text":"basis functionality package starts constructing query R. GDCQuery object contains filters, facets, parameters define returned results. token required accessing certain datasets.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a query of GDC metadata — query","text":"","code":"query(   entity,   filters = NULL,   facets = NULL,   legacy = FALSE,   expand = NULL,   fields = default_fields(entity) )  cases(...)  files(...)  projects(...)  annotations(...)  ssms(...)  ssm_occurrences(...)  cnvs(...)  cnv_occurrences(...)  genes(...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a query of GDC metadata — query","text":"entity character vector, including one entities .gdc_entities filters filter list, typically created using make_filter, added existing GDCQuery object using filter. facets character vector facets counting common values.  See available_fields. general, one specify parameter use facet instead. legacy logical(1) whether use \"legacy\" archive .  See https://docs.gdc.cancer.gov/Data_Portal/Users_Guide/Legacy_Archive/  https://gdc-portal.nci.nih.gov/legacy-archive/search/f details. expand character vector \"expands\" include returned data. See  available_expand fields character vector fields return. See available_fields. general, one specify fields directly, instead use select ... passed query","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start a query of GDC metadata — query","text":"S3 object, GDCQuery object. list following members. filters facets fields expand archive token","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/query.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Start a query of GDC metadata — query","text":"cases: convenience contructor GDCQuery cases files: convenience contructor GDCQuery files projects: convenience contructor GDCQuery projects annotations: convenience contructor GDCQuery annotations ssms: convenience contructor GDCQuery ssms ssm_occurrences: convenience contructor GDCQuery ssm_occurrences cnvs: convenience contructor GDCQuery cnvs cnv_occurrences: convenience contructor GDCQuery cnv_occurrences genes: convenience contructor GDCQuery genes","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a query of GDC metadata — query","text":"","code":"qcases = query('cases') # equivalent to: qcases = cases()"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readDNAcopy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read DNAcopy results into GRanges object — readDNAcopy","title":"Read DNAcopy results into GRanges object — readDNAcopy","text":"Read DNAcopy results GRanges object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readDNAcopy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read DNAcopy results into GRanges object — readDNAcopy","text":"","code":"readDNAcopy(fname, ...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readDNAcopy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read DNAcopy results into GRanges object — readDNAcopy","text":"fname path DNAcopy-like file. ... passed read_tsv","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readDNAcopy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read DNAcopy results into GRanges object — readDNAcopy","text":"GRanges object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readDNAcopy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read DNAcopy results into GRanges object — readDNAcopy","text":"","code":"fname = system.file(package='GenomicDataCommons',                     'extdata/dnacopy.tsv.gz') dnac = readDNAcopy(fname) #> Rows: 6 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (1): Sample #> dbl (5): Chromosome, Start, End, Num_Probes, Segment_Mean #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. class(dnac) #> [1] \"GRanges\" #> attr(,\"package\") #> [1] \"GenomicRanges\" length(dnac) #> [1] 6"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readHTSeqFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a single htseq-counts result file. — readHTSeqFile","title":"Read a single htseq-counts result file. — readHTSeqFile","text":"htseq package used extensively count reads relative regions (see  http://www-huber.embl.de/HTSeq/doc/counting.html). output htseq-count simple two-column table includes features column 1 counts column 2. function simply reads data one file assigns column names.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readHTSeqFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a single htseq-counts result file. — readHTSeqFile","text":"","code":"readHTSeqFile(fname, samplename = \"sample\", ...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readHTSeqFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a single htseq-counts result file. — readHTSeqFile","text":"fname character(1), path htseq-count file. samplename character(1), name sample. become name second column resulting data.frame, making easier merging necessary. ... passed read_tsv)","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readHTSeqFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a single htseq-counts result file. — readHTSeqFile","text":"two-column data frame","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/readHTSeqFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a single htseq-counts result file. — readHTSeqFile","text":"","code":"fname = system.file(package='GenomicDataCommons',                     'extdata/example.htseq.counts.gz') dat = readHTSeqFile(fname) #> Rows: 50 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (1): X1 #> dbl (1): X2 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(dat) #> # A tibble: 6 × 2 #>   feature            sample #>   <chr>               <dbl> #> 1 ENSG00000000003.13   3039 #> 2 ENSG00000000005.5       0 #> 3 ENSG00000000419.11   1625 #> 4 ENSG00000000457.12    960 #> 5 ENSG00000000460.15    154 #> 6 ENSG00000000938.11    610"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/response.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch GDCQuery metadata from GDC — response","title":"Fetch GDCQuery metadata from GDC — response","text":"Fetch GDCQuery metadata GDC","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch GDCQuery metadata from GDC — response","text":"","code":"response(x, ...)  # S3 method for GDCQuery response(x, from = 0, size = 10, ..., response_handler = jsonlite::fromJSON)  response_all(x, ...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch GDCQuery metadata from GDC — response","text":"x GDCQuery object ... passed httr (good passing config info, etc.) integer index start returning data size number records return response_handler function processes JSON (text) returns R object.  Default fromJSON.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch GDCQuery metadata from GDC — response","text":"GDCResponse object list following members: results query aggregations pages","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch GDCQuery metadata from GDC — response","text":"","code":"# basic class stuff gCases = cases() resp = response(gCases) class(resp) #> [1] \"GDCcasesResponse\" \"GDCResponse\"      \"list\"             names(resp) #> [1] \"results\"      \"query\"        \"pages\"        \"aggregations\"  # And results from query resp$results[[1]] #>  [1] \"4829dd8c-5445-41b3-ae37-bbcc333e8c9e\" #>  [2] \"d420e653-3fb2-432b-9e81-81232a80264d\" #>  [3] \"bfe15f44-e1dd-46ed-b429-908822d0a781\" #>  [4] \"8b3b1f24-419e-4043-82be-2bd41268bb0e\" #>  [5] \"fa30fc7f-90b6-4ca0-93b6-1351eae9dfc8\" #>  [6] \"47322ea3-6bbe-442b-a656-c48469cc99c1\" #>  [7] \"149a8565-e0c5-4474-a693-d44f1b445c0c\" #>  [8] \"2c636721-d11e-463e-8f77-a23501dd3d60\" #>  [9] \"6380f4ca-f7ca-41ee-90ed-54403bed84f6\" #> [10] \"9f4d0076-c4a2-46d4-879f-896946338c09\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results.html","id":null,"dir":"Reference","previous_headings":"","what":"results — results","title":"results — results","text":"results","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"results — results","text":"","code":"results(x, ...)  # S3 method for GDCQuery results(x, ...)  # S3 method for GDCResponse results(x, ...)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"results — results","text":"x GDCQuery object ... passed response","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"results — results","text":"(typically nested) list GDC records","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"results — results","text":"GDCQuery: GDCResponse:","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"results — results","text":"","code":"qcases = cases() %>% results() length(qcases) #> [1] 25"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results_all.html","id":null,"dir":"Reference","previous_headings":"","what":"results_all — results_all","title":"results_all — results_all","text":"results_all","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"results_all — results_all","text":"","code":"results_all(x)  # S3 method for GDCQuery results_all(x)  # S3 method for GDCResponse results_all(x)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"results_all — results_all","text":"x GDCQuery object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"results_all — results_all","text":"(typically nested) list GDC records","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results_all.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"results_all — results_all","text":"GDCQuery: GDCResponse:","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/results_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"results_all — results_all","text":"","code":"# details of all available projects projResults = projects() %>% results_all() length(projResults) #> [1] 9 count(projects()) #> [1] 70"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 generic to set GDCQuery fields — select","title":"S3 generic to set GDCQuery fields — select","text":"S3 generic set GDCQuery fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 generic to set GDCQuery fields — select","text":"","code":"select(x, fields)  # S3 method for GDCQuery select(x, fields)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 generic to set GDCQuery fields — select","text":"x objects set fields fields character vector specifying fields","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 generic to set GDCQuery fields — select","text":"GDCQuery object, fields member altered.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/select.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"S3 generic to set GDCQuery fields — select","text":"GDCQuery: set fields GDCQuery object","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 generic to set GDCQuery fields — select","text":"","code":"gProj = projects() gProj$fields #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                  head(available_fields(gProj)) #> [1] \"dbgap_accession_number\"         \"disease_type\"                   #> [3] \"intended_release_date\"          \"name\"                           #> [5] \"primary_site\"                   \"program.dbgap_accession_number\" default_fields(gProj) #>  [1] \"dbgap_accession_number\" \"disease_type\"           \"intended_release_date\"  #>  [4] \"name\"                   \"primary_site\"           \"project_autocomplete\"   #>  [7] \"project_id\"             \"releasable\"             \"released\"               #> [10] \"state\"                   gProj %>%   select(default_fields(gProj)[1:2]) %>%   response() %>%   str(max_level=2) #> List of 4 #>  $ results     :'data.frame':\t10 obs. of  4 variables: #>   ..$ id                    : chr [1:10] \"HCMI-CMDC\" \"GENIE-GRCC\" \"GENIE-DFCI\" \"GENIE-NKI\" ... #>   ..$ dbgap_accession_number: chr [1:10] \"phs001486\" NA NA NA ... #>   ..$ project_id            : chr [1:10] \"HCMI-CMDC\" \"GENIE-GRCC\" \"GENIE-DFCI\" \"GENIE-NKI\" ... #>   ..$ disease_type          :List of 10 #>   .. ..$ HCMI-CMDC : chr [1:11] \"Epithelial Neoplasms, NOS\" \"Complex Mixed and Stromal Neoplasms\" \"Gliomas\" \"Miscellaneous Bone Tumors\" ... #>   .. ..$ GENIE-GRCC: chr [1:32] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" ... #>   .. ..$ GENIE-DFCI: chr [1:52] \"Osseous and Chondromatous Neoplasms\" \"Other Leukemias\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... #>   .. ..$ GENIE-NKI : chr [1:23] \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" \"Transitional Cell Papillomas and Carcinomas\" ... #>   .. ..$ GENIE-VICC: chr [1:43] \"Neoplasms, NOS\" \"Adnexal and Skin Appendage Neoplasms\" \"Squamous Cell Neoplasms\" \"Gliomas\" ... #>   .. ..$ GENIE-UHN : chr [1:39] \"Other Leukemias\" \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... #>   .. ..$ GENIE-MDA : chr [1:34] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Fibromatous Neoplasms\" \"Myomatous Neoplasms\" ... #>   .. ..$ GENIE-MSK : chr [1:49] \"Osseous and Chondromatous Neoplasms\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" \"Fibromatous Neoplasms\" ... #>   .. ..$ GENIE-JHU : chr [1:33] \"Osseous and Chondromatous Neoplasms\" \"Other Leukemias\" \"Synovial-like Neoplasms\" \"Lymphoid Leukemias\" ... #>   .. ..$ FM-AD     : chr [1:23] \"Gliomas\" \"Acinar Cell Neoplasms\" \"Specialized Gonadal Neoplasms\" \"Miscellaneous Tumors\" ... #>  $ query       :List of 5 #>   ..$ fields : chr [1:3] \"project_id\" \"dbgap_accession_number\" \"disease_type\" #>   ..$ filters: NULL #>   ..$ facets : NULL #>   ..$ legacy : logi FALSE #>   ..$ expand : NULL #>   ..- attr(*, \"class\")= chr [1:3] \"gdc_projects\" \"GDCQuery\" \"list\" #>  $ pages       :List of 7 #>   ..$ count: int 10 #>   ..$ total: int 70 #>   ..$ size : int 10 #>   ..$ from : int 0 #>   ..$ sort : chr \"\" #>   ..$ page : int 1 #>   ..$ pages: int 7 #>  $ aggregations: list() #>  - attr(*, \"class\")= chr [1:3] \"GDCprojectsResponse\" \"GDCResponse\" \"list\""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/slicing.html","id":null,"dir":"Reference","previous_headings":"","what":"Query GDC for data slices — slicing","title":"Query GDC for data slices — slicing","text":"function returns BAM file representing reads overlapping regions specified either chromosomal regions gencode gene symbols.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/slicing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query GDC for data slices — slicing","text":"","code":"slicing(   uuid,   regions,   symbols,   destination = file.path(tempdir(), paste0(uuid, \".bam\")),   overwrite = FALSE,   progress = interactive(),   token = gdc_token(),   legacy = FALSE )"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/slicing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query GDC for data slices — slicing","text":"uuid character(1) identifying BAM file resource regions character() vector describing chromosomal regions, e.g., c(\"chr1\", \"chr2:10000\", \"chr3:10000-20000\") (chromosome 1, chromosome 2 position 10000 end, chromosome 3 10000 20000). symbols character() vector gencode gene symbols, e.g., c(\"BRCA1\", \"PTEN\") destination character(1) default tempfile() file path BAM file slice overwrite logical(1) default FALSE can destination overwritten? progress logical(1) default interactive() progress bar used? token character(1) security token allowing access restricted data. Almost BAM data restricted, token usually required. See https://docs.gdc.cancer.gov/Data/Data_Security/Data_Security/#authentication-tokens. legacy logical(1) whether use \"legacy\" archive, containing older, non-harmonized data. Slicing unharmonized legacy BAM files supported. See https://docs.gdc.cancer.gov/API/Users_Guide/BAM_Slicing/.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/slicing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query GDC for data slices — slicing","text":"character(1) destination downloaded BAM file","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/slicing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query GDC for data slices — slicing","text":"function uses Genomic Data Commons \"slicing\" API     get portions BAM file specified either using \"regions\"     using HGNC gene symbols.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/slicing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query GDC for data slices — slicing","text":"","code":"if (FALSE) {  slicing(\"df80679e-c4d3-487b-934c-fcc782e5d46e\",         regions=\"chr17:75000000-76000000\",         token=gdc_token())  # Get 10 BAM files. bamfiles = files() %>%             filter(data_format=='BAM') %>%            results(size=10) %>% ids()  # Current alignments at the GDC are to GRCh38 library('TxDb.Hsapiens.UCSC.hg38.knownGene') all_genes = genes(TxDb.Hsapiens.UCSC.hg38.knownGene)  first3genes = all_genes[1:3] # remove strand info strand(first3genes) = '*'  # We can get our regions easily now as.character(first3genes)  # Use parallel downloads to speed processing library(BiocParallel) register(MulticoreParam())  fnames = bplapply(bamfiles, slicing, overwrite = TRUE,                 regions=as.character(first3genes))  # 10 BAM files fnames  library(GenomicAlignments) lapply(unlist(fnames), readGAlignments)  }"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the GDC for current status — status","title":"Query the GDC for current status — status","text":"Query GDC current status","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the GDC for current status — status","text":"","code":"status(version = NULL)"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the GDC for current status — status","text":"version (optional) character(1) version GDC","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the GDC for current status — status","text":"List describing current status.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the GDC for current status — status","text":"","code":"status() #> $commit #> [1] \"d05a8530c733492e038fc2c3fda7c47a000652df\" #>  #> $data_release #> [1] \"Data Release 32.0 - March 29, 2022\" #>  #> $status #> [1] \"OK\" #>  #> $tag #> [1] \"3.0.0\" #>  #> $version #> [1] 1 #>"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Bulk data download — transfer","title":"Bulk data download — transfer","text":"GDC maintains special tool, https://docs.gdc.cancer.gov/Data_Transfer_Tool/Users_Guide/Getting_Started/, enables high-performance, potentially parallel, resumable downloads. Data Transfer Tool external program requires separate download. Due recent changes GDC API, transfer function now validates version `gdc-client` ensure reliable downloads.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bulk data download — transfer","text":"","code":"transfer(uuids, args = character(), token = NULL, overwrite = FALSE)  gdc_client_version_validate(valid_version = .GDC_COMPATIBLE_VERSION)  transfer_help()"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bulk data download — transfer","text":"uuids character() vector GDC file UUIDs args character() vector specifying command-line arguments passed gdc-client. See transfer_help possible values. arguments --manifest, --dir, --token-file determined manifest, destination_dir, token, respectively, provided elements args. token character(1) containing security token allowing access restricted data. See https://gdc-docs.nci.nih.gov/API/Users_Guide/Authentication_and_Authorization/. Note GDC transfer tool requires file data transfer. Therefore, token written temporary file (appropriate permissions set). overwrite logical(1) default FALSE indicating whether existing files identical name -written. valid_version character(1) last known version works current data release validate , typically changed end-user.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bulk data download — transfer","text":"character(1) directory path files     downloaded.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/transfer.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bulk data download — transfer","text":"gdc_client_version_validate: using 'client' option, `gdc-client` --date (>= 1.3.0). transfer_help:","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/transfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bulk data download — transfer","text":"","code":"if (FALSE) { uuids = files() %>%    filter(access == \"open\") %>%    results() %>%   ids() file_paths <- transfer(uuids) file_paths names(file_paths) # and with authenication # REQUIRES gdc_token  # destination <- transfer(uuids,token=gdc_token()) }"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/write_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"write a manifest data.frame to disk — write_manifest","title":"write a manifest data.frame to disk — write_manifest","text":"manifest method creates data.frame represents data manifest file needed GDC Data Transfer Tool. file format nothing special, simple helper function write manifest data.frame disk. returns path file written, can used \"-line\" call transfer.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/write_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write a manifest data.frame to disk — write_manifest","text":"","code":"write_manifest(manifest, destfile = tempfile())"},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/write_manifest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write a manifest data.frame to disk — write_manifest","text":"manifest data.frame five columns, typically created call manifest destfile filename saving manifest.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/write_manifest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"write a manifest data.frame to disk — write_manifest","text":"character(1) destination file name.","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/reference/write_manifest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write a manifest data.frame to disk — write_manifest","text":"","code":"mf = files() %>% manifest(size=10) write_manifest(mf) #> [1] \"/tmp/RtmpkFdsTb/file318a176b3b9c\""},{"path":[]},{"path":"http://bioconductor.github.io/GenomicDataCommons/news/index.html","id":"new-features-1-20-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.20.0","text":"gdcdata ellipses argument download data legacy archive, e.g., legacy = TRUE (#84, @LiNk-NY) missing (MISSING) !missing (MISSING) operations implemented filtering queries, see vignette (#96, @LiNk-NY) gdc-client version can validated last known good version based data release (#99, @LiNk-NY)","code":""},{"path":"http://bioconductor.github.io/GenomicDataCommons/news/index.html","id":"bug-fixes-and-minor-improvements-1-20-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.20.0","text":"gdc_clinical uses readr::type_convert handle columns inconsistent types API. update examples documentation vignette based new data release","code":""}]
